runspec v6152 started at Tue Jul  6 13:45:09 2021 on "shr-Desktop"
runspec is: /mnt/sata/Code/zerocost/zerocost-specbenchmark/bin/runspec
runspec: runspec --config=linux32-i386-clangzerocost.cfg --action=run --define cores=1 --iterations=1 --noreportable --size=ref all_c_cpp
toolset: linux-suse101-AMD64

Locating benchmarks...found 31 benchmarks in 7 benchsets.
Reading config file '/mnt/sata/Code/zerocost/zerocost-specbenchmark/config/linux32-i386-clangzerocost.cfg'

Verbosity = 5
Action    = validate
Tune      = base
Ext       = SegmentZero
Size      = ref
Machine   = default
benchmarks= 403.gcc
outputs   = asc
username  = shr
Benchmarks selected: 403.gcc
Compiling Binaries

------------------------------------------------------------------------
MD5 mismatch for options (stored: e17482de158179c3b53b99abc54242c7)(expected: 9edb500d3fdddbc84b4f8e425fcd6bfc)
  Building 403.gcc base SegmentZero default: (build_base_SegmentZero.0000)
Wrote to makefile '/mnt/sata/Code/zerocost/zerocost-specbenchmark/benchspec/CPU2006/403.gcc/build/build_base_SegmentZero.0000/Makefile.deps':

# These are the build dependencies

# End dependencies
Wrote to makefile '/mnt/sata/Code/zerocost/zerocost-specbenchmark/benchspec/CPU2006/403.gcc/build/build_base_SegmentZero.0000/Makefile.spec':
TUNE=base
EXT=SegmentZero
NUMBER=403
NAME=gcc
SOURCES= alloca.c asprintf.c vasprintf.c c-parse.c c-lang.c attribs.c \
	 c-errors.c c-lex.c c-pragma.c c-decl.c c-typeck.c c-convert.c \
	 c-aux-info.c c-common.c c-format.c c-semantics.c c-objc-common.c main.c \
	 cpplib.c cpplex.c cppmacro.c cppexp.c cppfiles.c cpphash.c cpperror.c \
	 cppinit.c cppdefault.c line-map.c mkdeps.c prefix.c version.c mbchar.c \
	 alias.c bb-reorder.c bitmap.c builtins.c caller-save.c calls.c cfg.c \
	 cfganal.c cfgbuild.c cfgcleanup.c cfglayout.c cfgloop.c cfgrtl.c \
	 combine.c conflict.c convert.c cse.c cselib.c dbxout.c debug.c \
	 dependence.c df.c diagnostic.c doloop.c dominance.c dwarf2asm.c \
	 dwarf2out.c dwarfout.c emit-rtl.c except.c explow.c expmed.c expr.c \
	 final.c flow.c fold-const.c function.c gcse.c genrtl.c ggc-common.c \
	 global.c graph.c haifa-sched.c hash.c hashtable.c hooks.c ifcvt.c \
	 insn-attrtab.c insn-emit.c insn-extract.c insn-opinit.c insn-output.c \
	 insn-peep.c insn-recog.c integrate.c intl.c jump.c langhooks.c lcm.c \
	 lists.c local-alloc.c loop.c obstack.c optabs.c params.c predict.c \
	 print-rtl.c print-tree.c profile.c real.c recog.c reg-stack.c regclass.c \
	 regmove.c regrename.c reload.c reload1.c reorg.c resource.c rtl.c \
	 rtlanal.c rtl-error.c sbitmap.c sched-deps.c sched-ebb.c sched-rgn.c \
	 sched-vis.c sdbout.c sibcall.c simplify-rtx.c ssa.c ssa-ccp.c ssa-dce.c \
	 stmt.c stor-layout.c stringpool.c timevar.c toplev.c tree.c tree-dump.c \
	 tree-inline.c unroll.c varasm.c varray.c vmsdbgout.c xcoffout.c \
	 ggc-page.c i386.c xmalloc.c xexit.c hashtab.c safe-ctype.c splay-tree.c \
	 xstrdup.c md5.c fibheap.c xstrerror.c concat.c partition.c hex.c \
	 lbasename.c getpwd.c ucbqsort.c
EXEBASE=gcc
NEED_MATH=yes
BENCHLANG=C
ONESTEP=
CONESTEP=

BENCH_FLAGS      = -I.
CC               = /mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition
COPTIMIZE        = -O2
CXX              = /mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang++ -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -std=gnu++03
CXXOPTIMIZE      = -O2
FC               = /usr/local/bin/gfortran
FOPTIMIZE        = -O2
FPBASE           = yes
OS               = unix
absolutely_no_locking = 0
abstol           = 
action           = validate
allow_extension_override = 0
backup_config    = 1
baseexe          = gcc
basepeak         = 0
benchdir         = benchspec
benchmark        = 403.gcc
binary           = 
bindir           = exe
build_in_build_dir = 1
builddir         = build
bundleaction     = 
bundlename       = 
calctol          = 0
changedmd5       = 0
check_integrity  = 1
check_md5        = 1
check_version    = 1
command_add_redirect = 0
commanderrfile   = speccmds.err
commandexe       = gcc_base.SegmentZero
commandfile      = speccmds.cmd
commandoutfile   = speccmds.out
commandstdoutfile = speccmds.stdout
compareerrfile   = compare.err
comparefile      = compare.cmd
compareoutfile   = compare.out
comparestdoutfile = compare.stdout
compile_error    = 0
compwhite        = 
configdir        = config
configpath       = /mnt/sata/Code/zerocost/zerocost-specbenchmark/config/linux32-i386-clangzerocost.cfg
copies           = 1
datadir          = data
delay            = 0
deletebinaries   = 0
deletework       = 0
difflines        = 10
dirprot          = 511
endian           = 12345678
env_vars         = 0
exitvals         = spec_exit
expand_notes     = 0
expid            = 
ext              = SegmentZero
fake             = 0
feedback         = 1
flag_url_base    = http://www.spec.org/auto/cpu2006/flags/
floatcompare     = 
help             = 0
http_proxy       = 
http_timeout     = 30
hw_avail         = Dec-9999
hw_cpu_char      = 
hw_cpu_mhz       = 3000
hw_cpu_name      = AMD Opteron 256
hw_disk          = SATA
hw_fpu           = Integrated
hw_memory        = 2 GB (2 x 1GB DDR333 CL2.5)
hw_model         = Tyan Thunder KKQS Pro (S4882)
hw_nchips        = 1
hw_ncores        = 1
hw_ncoresperchip = 1
hw_ncpuorder     = 1 chip
hw_nthreadspercore = 1
hw_ocache        = None
hw_pcache        = 64 KB I + 64 KB D on chip per chip
hw_scache        = 1 MB I+D on chip per chip
hw_tcache        = None
hw_vendor        = Tyan
ignore_errors    = yes
ignore_sigint    = 0
ignorecase       = 
info_wrap_columns = 50
inputdir         = input
iteration        = -1
iterations       = 1
keeptmp          = 0
license_num      = 0
line_width       = 0
locking          = 1
log              = CPU2006
log_line_width   = 0
log_timestamp    = 0
logname          = /mnt/sata/Code/zerocost/zerocost-specbenchmark/result/CPU2006.002.log
lognum           = 002
mach             = default
mail_reports     = all
mailcompress     = 0
mailmethod       = smtp
mailport         = 25
mailserver       = 127.0.0.1
mailto           = 
make             = specmake
make_no_clobber  = 0
makeflags        = -j8
max_active_compares = 0
mean_anyway      = 0
min_report_runs  = 3
minimize_builddirs = 0
minimize_rundirs = 0
name             = gcc
need_math        = yes
no_input_handler = close
no_monitor       = 
note_preenv      = 0
notes0100        =  C base flags: -O2
notes0110        =  C++ base flags: -O2
notes0120        =  Fortran base flags: -O2
notes25          = 
notes_wrap_columns = 0
notes_wrap_indent =   
num              = 403
obiwan           = 
os_exe_ext       = 
output           = asc
output_format    = asc
output_root      = 
outputdir        = output
parallel_setup   = 1
parallel_setup_prefork = 
parallel_setup_type = fork
parallel_test    = 0
parallel_test_submit = 0
path             = /mnt/sata/Code/zerocost/zerocost-specbenchmark/benchspec/CPU2006/403.gcc
plain_train      = 1
preenv           = 1
prefix           = 
prepared_by      = 
ranks            = 1
rate             = 0
realuser         = your name here
rebuild          = 0
reftime          = reftime
reltol           = 
reportable       = 0
resultdir        = result
review           = 0
run              = all
rundir           = run
runspec          = /mnt/sata/Code/zerocost/zerocost-specbenchmark/bin/runspec --config=linux32-i386-clangzerocost.cfg --action=run --define cores=1 --iterations=1 --noreportable --size=ref all_c_cpp
safe_eval        = 1
section_specifier_fatal = 1
sendmail         = /usr/sbin/sendmail
setpgrp_enabled  = 1
setprocgroup     = 1
shrate           = 0
sigint           = 2
size             = ref
size_class       = ref
skipabstol       = 
skipobiwan       = 
skipreltol       = 
skiptol          = 
smarttune        = base
specdiff         = specdiff
specmake         = Makefile.YYYtArGeTYYYspec
specrun          = specinvoke
speed            = 0
srcalt           = 
srcdir           = src
stagger          = 10
strict_rundir_verify = 1
sw_avail         = Dec-9999
sw_base_ptrsize  = 32-bit
sw_compiler      = gcc , g++ & gfortran 4.2 Snapshot 20060715 (for i386)
sw_file          = ext3
sw_os            = SUSE Linux 10.1 (for i386)
sw_other         = None
sw_peak_ptrsize  = 32-bit
sw_state         = runlevel 3
sysinfo_program  = 
table            = 1
teeout           = yes
teerunout        = yes
test_date        = Jul-2021
test_sponsor     = Turbo Computers
tester           = 
top              = /mnt/sata/Code/zerocost/zerocost-specbenchmark
train_with       = train
tune             = base
uid              = 1000
unbuffer         = 1
update-flags     = 0
use_submit_for_speed = 0
username         = shr
vendor           = anon
vendor_makefiles = 0
verbose          = 5
version          = 0
version_url      = http://www.spec.org/auto/cpu2006/current_version
worklist         = list
OUTPUT_RMFILES   = integrate.s
  Compile for '403.gcc' started at: Tue Jul  6 13:45:10 2021 (1625604310)
Issuing make.clean command 'specmake -j8 clean'
specmake -j8 clean 2> make.clean.err | tee make.clean.out
Start make.clean command: Tue Jul  6 13:45:10 2021 (1625604310)
specmake[1]: Entering directory `/mnt/sata/Code/zerocost/zerocost-specbenchmark/benchspec/CPU2006/403.gcc/build/build_base_SegmentZero.0000'
rm -rf gcc
rm -rf gcc.exe
rm -rf *.o  integrate.s
find . \( -name \*.o -o -name '*.fppized.f*' \) -print | xargs rm -rf
rm -rf core
rm -rf 
specmake[1]: Leaving directory `/mnt/sata/Code/zerocost/zerocost-specbenchmark/benchspec/CPU2006/403.gcc/build/build_base_SegmentZero.0000'
Stop make.clean command: Tue Jul  6 13:45:10 2021 (1625604310)
Elapsed time for make.clean command: 00:00:00 (0)
Issuing make command 'specmake -j8 build'
specmake -j8 build 2> make.err | tee make.out
Start make command: Tue Jul  6 13:45:10 2021 (1625604310)
specmake[1]: Entering directory `/mnt/sata/Code/zerocost/zerocost-specbenchmark/benchspec/CPU2006/403.gcc/build/build_base_SegmentZero.0000'
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o alloca.o -DSPEC_CPU -DNDEBUG -I.   -O2                alloca.c
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o asprintf.o -DSPEC_CPU -DNDEBUG -I.   -O2                asprintf.c
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o vasprintf.o -DSPEC_CPU -DNDEBUG -I.   -O2                vasprintf.c
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o c-parse.o -DSPEC_CPU -DNDEBUG -I.   -O2                c-parse.c
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o c-lang.o -DSPEC_CPU -DNDEBUG -I.   -O2                c-lang.c
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o attribs.o -DSPEC_CPU -DNDEBUG -I.   -O2                attribs.c
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o c-errors.o -DSPEC_CPU -DNDEBUG -I.   -O2                c-errors.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
clang-12: /mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o c-lex.o -DSPEC_CPU -DNDEBUG -I.   -O2                c-lex.c
warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o c-pragma.o -DSPEC_CPU -DNDEBUG -I.   -O2                c-pragma.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o c-decl.o -DSPEC_CPU -DNDEBUG -I.   -O2                c-decl.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o c-typeck.o -DSPEC_CPU -DNDEBUG -I.   -O2                c-typeck.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o c-convert.o -DSPEC_CPU -DNDEBUG -I.   -O2                c-convert.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12c-parse.c:2519:27: warning: implicit conversion from enumeration type 'enum c_tree_code' to different enumeration type 'enum tree_code' [-Wenum-conversion]
                  yyval.ttype = build1 (STMT_EXPR, last_expr_type, yyvsp[-2].ttype);
                                ~~~~~~  ^~~~~~~~~
: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
c-parse.c:3811:41: warning: implicit conversion from enumeration type 'enum c_tree_code' to different enumeration type 'enum tree_code' [-Wenum-conversion]
                  yyval.ttype = add_stmt (build_stmt (COMPOUND_STMT, last_tree));
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o c-aux-info.o -DSPEC_CPU -DNDEBUG -I.   -O2                c-aux-info.c
                                          ~~~~~~~~~~  ^~~~~~~~~~~~~
c-parse.c:3841:31: warning: implicit conversion from enumeration type 'enum c_tree_code' to different enumeration type 'enum tree_code' [-Wenum-conversion]
                    = add_stmt (build_stmt (DO_STMT, NULL_TREE,
                                ~~~~~~~~~~  ^~~~~~~
c-parse.c:3945:29: warning: implicit conversion from enumeration type 'enum c_tree_code' to different enumeration type 'enum tree_code' [-Wenum-conversion]
{ yyval.ttype = build_stmt (FOR_STMT, NULL_TREE, NULL_TREE,
                ~~~~~~~~~~  ^~~~~~~~
c-parse.c:3978:25: warning: implicit conversion from enumeration type 'enum c_tree_code' to different enumeration type 'enum tree_code' [-Wenum-conversion]
{ add_stmt (build_stmt (EXPR_STMT, yyvsp[-1].ttype)); ;
            ~~~~~~~~~~  ^~~~~~~~~
c-parse.c:4047:45: warning: implicit conversion from enumeration type 'enum c_tree_code' to different enumeration type 'enum tree_code' [-Wenum-conversion]
                      yyval.ttype = add_stmt (build_stmt (GOTO_STMT, decl));clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]

                                              ~~~~~~~~~~  ^~~~~~~~~clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]

c-parse.c:4059:41: warning: implicit conversion from enumeration type 'enum c_tree_code' to different enumeration type 'enum tree_code' [-Wenum-conversion]
                  yyval.ttype = add_stmt (build_stmt (GOTO_STMT, yyvsp[-1].ttype)); ;
                                          ~~~~~~~~~~  ^~~~~~~~~
c-parse.c:4087:45: warning: implicit conversion from enumeration type 'enum c_tree_code' to different enumeration type 'enum tree_code' [-Wenum-conversion]
                      yyval.ttype = add_stmt (build_stmt (LABEL_STMT, label));
                                              ~~~~~~~~~~  ^~~~~~~~~~
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o c-common.o -DSPEC_CPU -DNDEBUG -I.   -O2                c-common.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
c-decl.c:3928:22: warning: implicit conversion from enumeration type 'enum c_tree_code' to different enumeration type 'enum tree_code' [-Wenum-conversion]
  stmt = build_stmt (DECL_STMT, decl);
         ~~~~~~~~~~  ^~~~~~~~~
c-decl.c:3929:21: warning: implicit conversion from enumeration type 'enum c_tree_code' to different enumeration type 'enum tree_code' [-Wenum-conversion]
  complit = build1 (COMPOUND_LITERAL_EXPR, TREE_TYPE (decl), stmt);
            ~~~~~~  ^~~~~~~~~~~~~~~~~~~~~
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o c-format.o -DSPEC_CPU -DNDEBUG -I.   -O2                c-format.c
c-common.c:374:19: warning: implicit conversion from enumeration type 'enum c_tree_code' to different enumeration type 'enum tree_code' [-Wenum-conversion]
  r = build_stmt (IF_STMT, NULL_TREE, NULL_TREE, NULL_TREE);
      ~~~~~~~~~~  ^~~~~~~
c-common.c:390:19: warning: implicit conversion from enumeration type 'enum c_tree_code' to different enumeration type 'enum tree_code' [-Wenum-conversion]
  r = build_stmt (WHILE_STMT, NULL_TREE, NULL_TREE);
      ~~~~~~~~~~  ^~~~~~~~~~
c-common.c:449:26clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
:clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
 warning: implicit conversion from enumeration type 'enum c_tree_code' to different enumeration type 'enum tree_code' [-Wenum-conversion]
      body = build_stmt (COMPOUND_STMT, body);
             ~~~~~~~~~~  ^~~~~~~~~~~~~
c-decl.c:7457:32: warning: implicit conversion from enumeration type 'enum c_tree_code' to different enumeration type 'enum tree_code' [-Wenum-conversion]
  stmt = add_stmt (build_stmt (COMPOUND_STMT, NULL_TREE));
                   ~~~~~~~~~~  ^~~~~~~~~~~~~
c-common.c:1257:32: warning: implicit conversion from enumeration type 'enum c_tree_code' to different enumeration type 'enum tree_code' [-Wenum-conversion]
  return add_stmt (build_stmt (EXPR_STMT, expr));
                   ~~~~~~~~~~  ^~~~~~~~~
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o c-semantics.o -DSPEC_CPU -DNDEBUG -I.   -O2                c-semantics.c
In file included from c-common.c:2831:
./builtins.def:145:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_EXT_LIB_BUILTIN(BUILT_IN_ALLOCA,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:106:3: note: expanded from macro 'DEF_EXT_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:145:1: note: use array indexing to silence this warning
./builtins.def:106:3: note: expanded from macro 'DEF_EXT_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:145:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_EXT_LIB_BUILTIN(BUILT_IN_ALLOCA,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:106:3: note: expanded from macro 'DEF_EXT_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:145:1: note: use array indexing to silence this warning
./builtins.def:106:3: note: expanded from macro 'DEF_EXT_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:150:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_LIB_ALWAYS_BUILTIN(BUILT_IN_ABS,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:97:3: note: expanded from macro 'DEF_LIB_ALWAYS_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:150:1: note: use array indexing to silence this warning
./builtins.def:97:3: note: expanded from macro 'DEF_LIB_ALWAYS_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:150:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_LIB_ALWAYS_BUILTIN(BUILT_IN_ABS,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:97:3: note: expanded from macro 'DEF_LIB_ALWAYS_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:150:1: note: use array indexing to silence this warning
./builtins.def:97:3: note: expanded from macro 'DEF_LIB_ALWAYS_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:153:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_LIB_ALWAYS_BUILTIN(BUILT_IN_LABS,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:97:3: note: expanded from macro 'DEF_LIB_ALWAYS_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:153:1: note: use array indexing to silence this warning
./builtins.def:97:3: note: expanded from macro 'DEF_LIB_ALWAYS_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:153:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_LIB_ALWAYS_BUILTIN(BUILT_IN_LABS,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:97:3: note: expanded from macro 'DEF_LIB_ALWAYS_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:153:1: note: use array indexing to silence this warning
./builtins.def:97:3: note: expanded from macro 'DEF_LIB_ALWAYS_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:157:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_LIB_ALWAYS_BUILTIN(BUILT_IN_FABS,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:97:3: note: expanded from macro 'DEF_LIB_ALWAYS_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:157:1: note: use array indexing to silence this warning
./builtins.def:97:3: note: expanded from macro 'DEF_LIB_ALWAYS_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:157:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_LIB_ALWAYS_BUILTIN(BUILT_IN_FABS,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:97:3: note: expanded from macro 'DEF_LIB_ALWAYS_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:157:1: note: use array indexing to silence this warning
./builtins.def:97:3: note: expanded from macro 'DEF_LIB_ALWAYS_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:160:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_LIB_ALWAYS_BUILTIN(BUILT_IN_FABSF,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:97:3: note: expanded from macro 'DEF_LIB_ALWAYS_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:160:1: note: use array indexing to silence this warning
./builtins.def:97:3: note: expanded from macro 'DEF_LIB_ALWAYS_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:160:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_LIB_ALWAYS_BUILTIN(BUILT_IN_FABSF,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:97:3: note: expanded from macro 'DEF_LIB_ALWAYS_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:160:1: note: use array indexing to silence this warning
./builtins.def:97:3: note: expanded from macro 'DEF_LIB_ALWAYS_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:163:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_LIB_ALWAYS_BUILTIN(BUILT_IN_FABSL,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:97:3: note: expanded from macro 'DEF_LIB_ALWAYS_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:163:1: note: use array indexing to silence this warning
./builtins.def:97:3: note: expanded from macro 'DEF_LIB_ALWAYS_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:163:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_LIB_ALWAYS_BUILTIN(BUILT_IN_FABSL,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:97:3: note: expanded from macro 'DEF_LIB_ALWAYS_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:163:1: note: use array indexing to silence this warning
./builtins.def:97:3: note: expanded from macro 'DEF_LIB_ALWAYS_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:167:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_C99_BUILTIN(BUILT_IN_LLABS,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:113:3: note: expanded from macro 'DEF_C99_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:167:1: note: use array indexing to silence this warning
./builtins.def:113:3: note: expanded from macro 'DEF_C99_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:167:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_C99_BUILTIN(BUILT_IN_LLABS,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:113:3: note: expanded from macro 'DEF_C99_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:167:1: note: use array indexing to silence this warning
./builtins.def:113:3: note: expanded from macro 'DEF_C99_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:170:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_C99_BUILTIN(BUILT_IN_IMAXABS,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:113:3: note: expanded from macro 'DEF_C99_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:170:1: note: use array indexing to silence this warning
./builtins.def:113:3: note: expanded from macro 'DEF_C99_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:170:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_C99_BUILTIN(BUILT_IN_IMAXABS,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:113:3: note: expanded from macro 'DEF_C99_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:170:1: note: use array indexing to silence this warning
./builtins.def:113:3: note: expanded from macro 'DEF_C99_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:173:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_C99_BUILTIN(BUILT_IN_CONJ,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:113:3: note: expanded from macro 'DEF_C99_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:173:1: note: use array indexing to silence this warning
./builtins.def:113:3: note: expanded from macro 'DEF_C99_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:173:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_C99_BUILTIN(BUILT_IN_CONJ,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:113:3: note: expanded from macro 'DEF_C99_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:173:1: note: use array indexing to silence this warning
./builtins.def:113:3: note: expanded from macro 'DEF_C99_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o c-objc-common.o -DSPEC_CPU -DNDEBUG -I.   -O2                c-objc-common.c
In file included from c-common.c:2831:
./builtins.def:176:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_C99_BUILTIN(BUILT_IN_CONJF,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:113:3: note: expanded from macro 'DEF_C99_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:176:1: note: use array indexing to silence this warning
./builtins.def:113:3: note: expanded from macro 'DEF_C99_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:176:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_C99_BUILTIN(BUILT_IN_CONJF,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:113:3: note: expanded from macro 'DEF_C99_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:176:1: note: use array indexing to silence this warning
./builtins.def:113:3: note: expanded from macro 'DEF_C99_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:179:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_C99_BUILTIN(BUILT_IN_CONJL,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:113:3: note: expanded from macro 'DEF_C99_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:179:1: note: use array indexing to silence this warning
./builtins.def:113:3: note: expanded from macro 'DEF_C99_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:179:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_C99_BUILTIN(BUILT_IN_CONJL,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:113:3: note: expanded from macro 'DEF_C99_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:179:1: note: use array indexing to silence this warning
./builtins.def:113:3: note: expanded from macro 'DEF_C99_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:182:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_C99_BUILTIN(BUILT_IN_CREAL,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:113:3: note: expanded from macro 'DEF_C99_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:182:1: note: use array indexing to silence this warning
./builtins.def:113:3: note: expanded from macro 'DEF_C99_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:182:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_C99_BUILTIN(BUILT_IN_CREAL,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:113:3: note: expanded from macro 'DEF_C99_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:182:1: note: use array indexing to silence this warning
./builtins.def:113:3: note: expanded from macro 'DEF_C99_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:185:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_C99_BUILTIN(BUILT_IN_CREALF,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:113:3: note: expanded from macro 'DEF_C99_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:185:1: note: use array indexing to silence this warning
./builtins.def:113:3: note: expanded from macro 'DEF_C99_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:185:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_C99_BUILTIN(BUILT_IN_CREALF,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:113:3: note: expanded from macro 'DEF_C99_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:185:1: note: use array indexing to silence this warning
./builtins.def:113:3: note: expanded from macro 'DEF_C99_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:188:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_C99_BUILTIN(BUILT_IN_CREALL,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:113:3: note: expanded from macro 'DEF_C99_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:188:1: note: use array indexing to silence this warning
./builtins.def:113:3: note: expanded from macro 'DEF_C99_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:188:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_C99_BUILTIN(BUILT_IN_CREALL,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:113:3: note: expanded from macro 'DEF_C99_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:188:1: note: use array indexing to silence this warning
./builtins.def:113:3: note: expanded from macro 'DEF_C99_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:191:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_C99_BUILTIN(BUILT_IN_CIMAG,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:113:3: note: expanded from macro 'DEF_C99_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:191:1: note: use array indexing to silence this warning
./builtins.def:113:3: note: expanded from macro 'DEF_C99_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:191:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_C99_BUILTIN(BUILT_IN_CIMAG,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:113:3: note: expanded from macro 'DEF_C99_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:191:1: note: use array indexing to silence this warning
./builtins.def:113:3: note: expanded from macro 'DEF_C99_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:194:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_C99_BUILTIN(BUILT_IN_CIMAGF,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:113:3: note: expanded from macro 'DEF_C99_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:194:1: note: use array indexing to silence this warning
./builtins.def:113:3: note: expanded from macro 'DEF_C99_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:194:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_C99_BUILTIN(BUILT_IN_CIMAGF,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:113:3: note: expanded from macro 'DEF_C99_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:194:1: note: use array indexing to silence this warning
./builtins.def:113:3: note: expanded from macro 'DEF_C99_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
In file included from c-common.c:2831:
./builtins.def:197:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_C99_BUILTIN(BUILT_IN_CIMAGL,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:113:3: note: expanded from macro 'DEF_C99_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:197:1: note: use array indexing to silence this warning
./builtins.def:113:3: note: expanded from macro 'DEF_C99_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
In file included from c-common.c:2831:
./builtins.def:197:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_C99_BUILTIN(BUILT_IN_CIMAGL,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:113:3: note: expanded from macro 'DEF_C99_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:197:1: note: use array indexing to silence this warning
./builtins.def:113:3: note: expanded from macro 'DEF_C99_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:214:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_BUILTIN (BUILT_IN_BZERO,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:214:1: note: use array indexing to silence this warning
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:214:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_BUILTIN (BUILT_IN_BZERO,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:214:1: note: use array indexing to silence this warning
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:220:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_BUILTIN (BUILT_IN_BCMP,
^~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:220:1: note: use array indexing to silence this warning
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:220:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_BUILTIN (BUILT_IN_BCMP,
^~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:220:1: note: use array indexing to silence this warning
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:227:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_EXT_LIB_BUILTIN(BUILT_IN_FFS,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:106:3: note: expanded from macro 'DEF_EXT_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:227:1: note: use array indexing to silence this warning
./builtins.def:106:3: note: expanded from macro 'DEF_EXT_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:227:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_EXT_LIB_BUILTIN(BUILT_IN_FFS,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:106:3: note: expanded from macro 'DEF_EXT_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:227:1: note: use array indexing to silence this warning
./builtins.def:106:3: note: expanded from macro 'DEF_EXT_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:230:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_EXT_LIB_BUILTIN(BUILT_IN_INDEX,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:106:3: note: expanded from macro 'DEF_EXT_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:230:1: note: use array indexing to silence this warning
./builtins.def:106:3: note: expanded from macro 'DEF_EXT_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:230:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_EXT_LIB_BUILTIN(BUILT_IN_INDEX,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:106:3: note: expanded from macro 'DEF_EXT_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:230:1: note: use array indexing to silence this warning
./builtins.def:106:3: note: expanded from macro 'DEF_EXT_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:233:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_EXT_LIB_BUILTIN(BUILT_IN_RINDEX,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:106:3: note: expanded from macro 'DEF_EXT_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:233:1: note: use array indexing to silence this warning
./builtins.def:106:3: note: expanded from macro 'DEF_EXT_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:233:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_EXT_LIB_BUILTIN(BUILT_IN_RINDEX,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:106:3: note: expanded from macro 'DEF_EXT_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:233:1: note: use array indexing to silence this warning
./builtins.def:106:3: note: expanded from macro 'DEF_EXT_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:237:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_LIB_BUILTIN(BUILT_IN_MEMCPY,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:237:1: note: use array indexing to silence this warning
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:237:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_LIB_BUILTIN(BUILT_IN_MEMCPY,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:237:1: note: use array indexing to silence this warning
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:240:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_LIB_BUILTIN(BUILT_IN_MEMCMP,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:240:1: note: use array indexing to silence this warning
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:240:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_LIB_BUILTIN(BUILT_IN_MEMCMP,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:240:1: note: use array indexing to silence this warning
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:243:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_LIB_BUILTIN(BUILT_IN_MEMSET,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:243:1: note: use array indexing to silence this warning
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:243:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_LIB_BUILTIN(BUILT_IN_MEMSET,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:243:1: note: use array indexing to silence this warning
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:247:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_LIB_BUILTIN(BUILT_IN_STRCAT,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:247:1: note: use array indexing to silence this warning
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:247:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_LIB_BUILTIN(BUILT_IN_STRCAT,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:247:1: note: use array indexing to silence this warning
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:250:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_LIB_BUILTIN(BUILT_IN_STRNCAT,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:250:1: note: use array indexing to silence this warning
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:250:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_LIB_BUILTIN(BUILT_IN_STRNCAT,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:250:1: note: use array indexing to silence this warning
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:253:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_LIB_BUILTIN(BUILT_IN_STRCPY,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:253:1: note: use array indexing to silence this warning
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:253:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_LIB_BUILTIN(BUILT_IN_STRCPY,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:253:1: note: use array indexing to silence this warning
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:256:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_LIB_BUILTIN(BUILT_IN_STRNCPY,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:256:1: note: use array indexing to silence this warning
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:256:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_LIB_BUILTIN(BUILT_IN_STRNCPY,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:256:1: note: use array indexing to silence this warning
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:259:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_LIB_BUILTIN(BUILT_IN_STRCMP,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:259:1: note: use array indexing to silence this warning
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:259:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_LIB_BUILTIN(BUILT_IN_STRCMP,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:259:1: note: use array indexing to silence this warning
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:262:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_LIB_BUILTIN(BUILT_IN_STRNCMP,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:262:1: note: use array indexing to silence this warning
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:262:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_LIB_BUILTIN(BUILT_IN_STRNCMP,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:262:1: note: use array indexing to silence this warning
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:265:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_LIB_BUILTIN(BUILT_IN_STRLEN,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:265:1: note: use array indexing to silence this warning
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:265:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_LIB_BUILTIN(BUILT_IN_STRLEN,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:265:1: note: use array indexing to silence this warning
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:268:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_LIB_BUILTIN(BUILT_IN_STRSTR,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:268:1: note: use array indexing to silence this warning
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:268:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_LIB_BUILTIN(BUILT_IN_STRSTR,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:268:1: note: use array indexing to silence this warning
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:271:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_LIB_BUILTIN(BUILT_IN_STRPBRK,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:271:1: note: use array indexing to silence this warning
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:271:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_LIB_BUILTIN(BUILT_IN_STRPBRK,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:271:1: note: use array indexing to silence this warning
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:274:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_LIB_BUILTIN(BUILT_IN_STRSPN,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:274:1: note: use array indexing to silence this warning
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:274:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_LIB_BUILTIN(BUILT_IN_STRSPN,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:274:1: note: use array indexing to silence this warning
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:277:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_LIB_BUILTIN(BUILT_IN_STRCSPN,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:277:1: note: use array indexing to silence this warning
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:277:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_LIB_BUILTIN(BUILT_IN_STRCSPN,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:277:1: note: use array indexing to silence this warning
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:280:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_LIB_BUILTIN(BUILT_IN_STRCHR,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:280:1: note: use array indexing to silence this warning
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:280:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_LIB_BUILTIN(BUILT_IN_STRCHR,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:280:1: note: use array indexing to silence this warning
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:283:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_LIB_BUILTIN(BUILT_IN_STRRCHR,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:283:1: note: use array indexing to silence this warning
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:283:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_LIB_BUILTIN(BUILT_IN_STRRCHR,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:283:1: note: use array indexing to silence this warning
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o main.o -DSPEC_CPU -DNDEBUG -I.   -O2                main.c
In file included from c-common.c:2831:
./builtins.def:287:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_LIB_BUILTIN(BUILT_IN_SQRT,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:287:1: note: use array indexing to silence this warning
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:287:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_LIB_BUILTIN(BUILT_IN_SQRT,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:287:1: note: use array indexing to silence this warning
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:290:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_LIB_BUILTIN(BUILT_IN_SIN,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:290:1: note: use array indexing to silence this warning
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:290:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_LIB_BUILTIN(BUILT_IN_SIN,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:290:1: note: use array indexing to silence this warning
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:293:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_LIB_BUILTIN(BUILT_IN_COS,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:293:1: note: use array indexing to silence this warning
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:293:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_LIB_BUILTIN(BUILT_IN_COS,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:293:1: note: use array indexing to silence this warning
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:296:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_LIB_BUILTIN(BUILT_IN_SQRTF,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:296:1: note: use array indexing to silence this warning
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:296:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_LIB_BUILTIN(BUILT_IN_SQRTF,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:296:1: note: use array indexing to silence this warning
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:299:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_LIB_BUILTIN(BUILT_IN_SINF,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:299:1: note: use array indexing to silence this warning
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:299:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_LIB_BUILTIN(BUILT_IN_SINF,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:299:1: note: use array indexing to silence this warning
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:302:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_LIB_BUILTIN(BUILT_IN_COSF,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:302:1: note: use array indexing to silence this warning
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:302:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_LIB_BUILTIN(BUILT_IN_COSF,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:302:1: note: use array indexing to silence this warning
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:305:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_LIB_BUILTIN(BUILT_IN_SQRTL,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:305:1: note: use array indexing to silence this warning
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:305:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_LIB_BUILTIN(BUILT_IN_SQRTL,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:305:1: note: use array indexing to silence this warning
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:308:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_LIB_BUILTIN(BUILT_IN_SINL,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:308:1: note: use array indexing to silence this warning
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:308:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_LIB_BUILTIN(BUILT_IN_SINL,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:308:1: note: use array indexing to silence this warning
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:311:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_LIB_BUILTIN(BUILT_IN_COSL,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:311:1: note: use array indexing to silence this warning
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:311:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_LIB_BUILTIN(BUILT_IN_COSL,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:311:1: note: use array indexing to silence this warning
./builtins.def:90:3: note: expanded from macro 'DEF_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:321:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_GCC_BUILTIN(BUILT_IN_SAVEREGS,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:321:1: note: use array indexing to silence this warning
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:321:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_GCC_BUILTIN(BUILT_IN_SAVEREGS,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:321:1: note: use array indexing to silence this warning
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:324:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_GCC_BUILTIN(BUILT_IN_CLASSIFY_TYPE,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:324:1: note: use array indexing to silence this warning
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:324:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_GCC_BUILTIN(BUILT_IN_CLASSIFY_TYPE,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:324:1: note: use array indexing to silence this warning
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:327:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_GCC_BUILTIN(BUILT_IN_NEXT_ARG,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:327:1: note: use array indexing to silence this warning
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:327:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_GCC_BUILTIN(BUILT_IN_NEXT_ARG,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:327:1: note: use array indexing to silence this warning
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:330:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_GCC_BUILTIN(BUILT_IN_ARGS_INFO,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:330:1: note: use array indexing to silence this warning
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:330:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_GCC_BUILTIN(BUILT_IN_ARGS_INFO,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:330:1: note: use array indexing to silence this warning
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:333:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_GCC_BUILTIN(BUILT_IN_CONSTANT_P, 
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:333:1: note: use array indexing to silence this warning
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:333:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_GCC_BUILTIN(BUILT_IN_CONSTANT_P, 
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:333:1: note: use array indexing to silence this warning
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:336:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_GCC_BUILTIN(BUILT_IN_FRAME_ADDRESS,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:336:1: note: use array indexing to silence this warning
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:336:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_GCC_BUILTIN(BUILT_IN_FRAME_ADDRESS,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:336:1: note: use array indexing to silence this warning
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:339:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_GCC_BUILTIN(BUILT_IN_RETURN_ADDRESS, 
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:339:1: note: use array indexing to silence this warning
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:339:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_GCC_BUILTIN(BUILT_IN_RETURN_ADDRESS, 
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:339:1: note: use array indexing to silence this warning
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:342:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_GCC_BUILTIN(BUILT_IN_AGGREGATE_INCOMING_ADDRESS,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:342:1: note: use array indexing to silence this warning
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:342:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_GCC_BUILTIN(BUILT_IN_AGGREGATE_INCOMING_ADDRESS,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:342:1: note: use array indexing to silence this warning
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:345:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_GCC_BUILTIN(BUILT_IN_APPLY_ARGS,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:345:1: note: use array indexing to silence this warning
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:345:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_GCC_BUILTIN(BUILT_IN_APPLY_ARGS,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:345:1: note: use array indexing to silence this warning
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:348:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_GCC_BUILTIN(BUILT_IN_APPLY,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:348:1: note: use array indexing to silence this warning
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:348:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_GCC_BUILTIN(BUILT_IN_APPLY,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:348:1: note: use array indexing to silence this warning
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:351:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_GCC_BUILTIN(BUILT_IN_RETURN,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:351:1: note: use array indexing to silence this warning
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:351:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_GCC_BUILTIN(BUILT_IN_RETURN,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:351:1: note: use array indexing to silence this warning
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:354:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_GCC_BUILTIN(BUILT_IN_SETJMP,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:354:1: note: use array indexing to silence this warning
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:354:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_GCC_BUILTIN(BUILT_IN_SETJMP,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:354:1: note: use array indexing to silence this warning
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:357:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_GCC_BUILTIN(BUILT_IN_LONGJMP,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:357:1: note: use array indexing to silence this warning
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:357:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_GCC_BUILTIN(BUILT_IN_LONGJMP,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:357:1: note: use array indexing to silence this warning
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:360:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_GCC_BUILTIN(BUILT_IN_TRAP,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:360:1: note: use array indexing to silence this warning
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:360:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_GCC_BUILTIN(BUILT_IN_TRAP,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:360:1: note: use array indexing to silence this warning
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:363:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_GCC_BUILTIN(BUILT_IN_PREFETCH,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:363:1: note: use array indexing to silence this warning
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:363:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_GCC_BUILTIN(BUILT_IN_PREFETCH,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:363:1: note: use array indexing to silence this warning
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:368:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_FALLBACK_BUILTIN(BUILT_IN_PUTCHAR,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:70:3: note: expanded from macro 'DEF_FALLBACK_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:368:1: note: use array indexing to silence this warning
./builtins.def:70:3: note: expanded from macro 'DEF_FALLBACK_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:368:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_FALLBACK_BUILTIN(BUILT_IN_PUTCHAR,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:70:3: note: expanded from macro 'DEF_FALLBACK_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:368:1: note: use array indexing to silence this warning
./builtins.def:70:3: note: expanded from macro 'DEF_FALLBACK_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
c-typeck.c:3159:10: warning: case value not in enumerated type 'enum tree_code' [-Wswitch]
    case COMPOUND_LITERAL_EXPR:
         ^
In file included from c-common.c:2831:
./builtins.def:371:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_FALLBACK_BUILTIN(BUILT_IN_PUTS,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:70:3: note: expanded from macro 'DEF_FALLBACK_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:371:1: note: use array indexing to silence this warning
./builtins.def:70:3: note: expanded from macro 'DEF_FALLBACK_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:371:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_FALLBACK_BUILTIN(BUILT_IN_PUTS,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:70:3: note: expanded from macro 'DEF_FALLBACK_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:371:1: note: use array indexing to silence this warning
./builtins.def:70:3: note: expanded from macro 'DEF_FALLBACK_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:374:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_FRONT_END_LIB_BUILTIN(BUILT_IN_PRINTF,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:120:3: note: expanded from macro 'DEF_FRONT_END_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_FRONTEND, TYPE, TYPE,       \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:374:1: note: use array indexing to silence this warning
./builtins.def:120:3: note: expanded from macro 'DEF_FRONT_END_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_FRONTEND, TYPE, TYPE,       \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:374:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_FRONT_END_LIB_BUILTIN(BUILT_IN_PRINTF,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:120:3: note: expanded from macro 'DEF_FRONT_END_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_FRONTEND, TYPE, TYPE,       \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:374:1: note: use array indexing to silence this warning
./builtins.def:120:3: note: expanded from macro 'DEF_FRONT_END_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_FRONTEND, TYPE, TYPE,       \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:377:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_FALLBACK_BUILTIN(BUILT_IN_FPUTC,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:70:3: note: expanded from macro 'DEF_FALLBACK_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:377:1: note: use array indexing to silence this warning
./builtins.def:70:3: note: expanded from macro 'DEF_FALLBACK_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:377:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_FALLBACK_BUILTIN(BUILT_IN_FPUTC,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:70:3: note: expanded from macro 'DEF_FALLBACK_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:377:1: note: use array indexing to silence this warning
./builtins.def:70:3: note: expanded from macro 'DEF_FALLBACK_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:384:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_BUILTIN (BUILT_IN_FPUTS,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:384:1: note: use array indexing to silence this warning
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:384:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_BUILTIN (BUILT_IN_FPUTS,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:384:1: note: use array indexing to silence this warning
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
c-typeck.c:3315:12: warning: case value not in enumerated type 'enum tree_code' [-Wswitch]
      case COMPOUND_LITERAL_EXPR:
           ^
In file included from c-common.c:2831:
./builtins.def:390:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_FALLBACK_BUILTIN(BUILT_IN_FWRITE,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:70:3: note: expanded from macro 'DEF_FALLBACK_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:390:1: note: use array indexing to silence this warning
./builtins.def:70:3: note: expanded from macro 'DEF_FALLBACK_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:390:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_FALLBACK_BUILTIN(BUILT_IN_FWRITE,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:70:3: note: expanded from macro 'DEF_FALLBACK_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:390:1: note: use array indexing to silence this warning
./builtins.def:70:3: note: expanded from macro 'DEF_FALLBACK_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:393:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_FRONT_END_LIB_BUILTIN(BUILT_IN_FPRINTF,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:120:3: note: expanded from macro 'DEF_FRONT_END_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_FRONTEND, TYPE, TYPE,       \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:393:1: note: use array indexing to silence this warning
./builtins.def:120:3: note: expanded from macro 'DEF_FRONT_END_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_FRONTEND, TYPE, TYPE,       \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:393:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_FRONT_END_LIB_BUILTIN(BUILT_IN_FPRINTF,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:120:3: note: expanded from macro 'DEF_FRONT_END_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_FRONTEND, TYPE, TYPE,       \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:393:1: note: use array indexing to silence this warning
./builtins.def:120:3: note: expanded from macro 'DEF_FRONT_END_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_FRONTEND, TYPE, TYPE,       \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:399:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_EXT_FALLBACK_BUILTIN(BUILT_IN_PUTCHAR_UNLOCKED,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:79:3: note: expanded from macro 'DEF_EXT_FALLBACK_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:399:1: note: use array indexing to silence this warning
./builtins.def:79:3: note: expanded from macro 'DEF_EXT_FALLBACK_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:399:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_EXT_FALLBACK_BUILTIN(BUILT_IN_PUTCHAR_UNLOCKED,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:79:3: note: expanded from macro 'DEF_EXT_FALLBACK_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:399:1: note: use array indexing to silence this warning
./builtins.def:79:3: note: expanded from macro 'DEF_EXT_FALLBACK_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:402:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_EXT_FALLBACK_BUILTIN(BUILT_IN_PUTS_UNLOCKED,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:79:3: note: expanded from macro 'DEF_EXT_FALLBACK_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:402:1: note: use array indexing to silence this warning
./builtins.def:79:3: note: expanded from macro 'DEF_EXT_FALLBACK_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:402:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_EXT_FALLBACK_BUILTIN(BUILT_IN_PUTS_UNLOCKED,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:79:3: note: expanded from macro 'DEF_EXT_FALLBACK_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
clang-12clang-12./builtins.def: : :402:1: note: warninguse array indexing to silence this warningwarning: 
: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]-Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]

./builtins.def:79:3: note: expanded from macro 'DEF_EXT_FALLBACK_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
clang-12clang-12: : warningwarning: In file included from : argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]c-common.c

:2831:
./builtins.def:405:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_EXT_FRONT_END_LIB_BUILTIN(BUILT_IN_PRINTF_UNLOCKED,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:129:3: note: expanded from macro 'DEF_EXT_FRONT_END_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_FRONTEND, TYPE, TYPE,       \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:405:1: note: use array indexing to silence this warning
./builtins.def:129:3: note: expanded from macro 'DEF_EXT_FRONT_END_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_FRONTEND, TYPE, TYPE,       \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:405:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_EXT_FRONT_END_LIB_BUILTIN(BUILT_IN_PRINTF_UNLOCKED,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:129:3: note: expanded from macro 'DEF_EXT_FRONT_END_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_FRONTEND, TYPE, TYPE,       \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:405:1: note: use array indexing to silence this warning
./builtins.def:129:3: note: expanded from macro 'DEF_EXT_FRONT_END_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_FRONTEND, TYPE, TYPE,       \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:408:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_EXT_FALLBACK_BUILTIN(BUILT_IN_FPUTC_UNLOCKED,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:79:3: note: expanded from macro 'DEF_EXT_FALLBACK_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:408:1: note: use array indexing to silence this warning
./builtins.def:79:3: note: expanded from macro 'DEF_EXT_FALLBACK_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:408:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_EXT_FALLBACK_BUILTIN(BUILT_IN_FPUTC_UNLOCKED,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:79:3: note: expanded from macro 'DEF_EXT_FALLBACK_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:408:1: note: use array indexing to silence this warning
./builtins.def:79:3: note: expanded from macro 'DEF_EXT_FALLBACK_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:415:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_BUILTIN (BUILT_IN_FPUTS_UNLOCKED,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:415:1: note: use array indexing to silence this warning
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:415:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_BUILTIN (BUILT_IN_FPUTS_UNLOCKED,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:415:1: note: use array indexing to silence this warning
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:421:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_EXT_FALLBACK_BUILTIN(BUILT_IN_FWRITE_UNLOCKED,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:79:3: note: expanded from macro 'DEF_EXT_FALLBACK_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:421:1: note: use array indexing to silence this warning
./builtins.def:79:3: note: expanded from macro 'DEF_EXT_FALLBACK_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:421:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_EXT_FALLBACK_BUILTIN(BUILT_IN_FWRITE_UNLOCKED,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:79:3: note: expanded from macro 'DEF_EXT_FALLBACK_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:421:1: note: use array indexing to silence this warning
./builtins.def:79:3: note: expanded from macro 'DEF_EXT_FALLBACK_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE, \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:424:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_EXT_FRONT_END_LIB_BUILTIN(BUILT_IN_FPRINTF_UNLOCKED,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:129:3: note: expanded from macro 'DEF_EXT_FRONT_END_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_FRONTEND, TYPE, TYPE,       \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:424:1: note: use array indexing to silence this warning
./builtins.def:129:3: note: expanded from macro 'DEF_EXT_FRONT_END_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_FRONTEND, TYPE, TYPE,       \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:424:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_EXT_FRONT_END_LIB_BUILTIN(BUILT_IN_FPRINTF_UNLOCKED,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:129:3: note: expanded from macro 'DEF_EXT_FRONT_END_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_FRONTEND, TYPE, TYPE,       \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:424:1: note: use array indexing to silence this warning
./builtins.def:129:3: note: expanded from macro 'DEF_EXT_FRONT_END_LIB_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_FRONTEND, TYPE, TYPE,       \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:429:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_GCC_BUILTIN(BUILT_IN_ISGREATER, 
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:429:1: note: use array indexing to silence this warning
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:429:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_GCC_BUILTIN(BUILT_IN_ISGREATER, 
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:429:1: note: use array indexing to silence this warning
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:432:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_GCC_BUILTIN(BUILT_IN_ISGREATEREQUAL,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:432:1: note: use array indexing to silence this warning
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:432:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_GCC_BUILTIN(BUILT_IN_ISGREATEREQUAL,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:432:1: note: use array indexing to silence this warning
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:435:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_GCC_BUILTIN(BUILT_IN_ISLESS,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:435:1: note: use array indexing to silence this warning
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:435:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_GCC_BUILTIN(BUILT_IN_ISLESS,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:435:1: note: use array indexing to silence this warning
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:438:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_GCC_BUILTIN(BUILT_IN_ISLESSEQUAL,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:438:1: note: use array indexing to silence this warning
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:438:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_GCC_BUILTIN(BUILT_IN_ISLESSEQUAL,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:438:1: note: use array indexing to silence this warning
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:441:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_GCC_BUILTIN(BUILT_IN_ISLESSGREATER,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:441:1: note: use array indexing to silence this warning
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:441:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_GCC_BUILTIN(BUILT_IN_ISLESSGREATER,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:441:1: note: use array indexing to silence this warning
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:444:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_GCC_BUILTIN(BUILT_IN_ISUNORDERED,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:444:1: note: use array indexing to silence this warning
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:444:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_GCC_BUILTIN(BUILT_IN_ISUNORDERED,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:444:1: note: use array indexing to silence this warning
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:449:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_GCC_BUILTIN(BUILT_IN_UNWIND_INIT,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:449:1: note: use array indexing to silence this warning
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:449:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_GCC_BUILTIN(BUILT_IN_UNWIND_INIT,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:449:1: note: use array indexing to silence this warning
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:452:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_GCC_BUILTIN(BUILT_IN_DWARF_CFA,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:452:1: note: use array indexing to silence this warning
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:452:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_GCC_BUILTIN(BUILT_IN_DWARF_CFA,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:452:1: note: use array indexing to silence this warning
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:455:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_GCC_BUILTIN(BUILT_IN_DWARF_FP_REGNUM,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:455:1: note: use array indexing to silence this warning
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:455:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_GCC_BUILTIN(BUILT_IN_DWARF_FP_REGNUM,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:455:1: note: use array indexing to silence this warning
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:458:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_GCC_BUILTIN(BUILT_IN_INIT_DWARF_REG_SIZES,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:458:1: note: use array indexing to silence this warning
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:458:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_GCC_BUILTIN(BUILT_IN_INIT_DWARF_REG_SIZES,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:458:1: note: use array indexing to silence this warning
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:461:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_GCC_BUILTIN(BUILT_IN_FROB_RETURN_ADDR,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:461:1: note: use array indexing to silence this warning
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:461:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_GCC_BUILTIN(BUILT_IN_FROB_RETURN_ADDR,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:461:1: note: use array indexing to silence this warning
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:464:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_GCC_BUILTIN(BUILT_IN_EXTRACT_RETURN_ADDR,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:464:1: note: use array indexing to silence this warning
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:464:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_GCC_BUILTIN(BUILT_IN_EXTRACT_RETURN_ADDR,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:464:1: note: use array indexing to silence this warning
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:467:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_GCC_BUILTIN(BUILT_IN_EH_RETURN,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:467:1: note: use array indexing to silence this warning
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:467:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_GCC_BUILTIN(BUILT_IN_EH_RETURN,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:467:1: note: use array indexing to silence this warning
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:470:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_GCC_BUILTIN(BUILT_IN_EH_RETURN_DATA_REGNO,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:470:1: note: use array indexing to silence this warning
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:470:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_GCC_BUILTIN(BUILT_IN_EH_RETURN_DATA_REGNO,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:470:1: note: use array indexing to silence this warning
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:474:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_GCC_BUILTIN(BUILT_IN_VARARGS_START,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:474:1: note: use array indexing to silence this warning
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:474:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_GCC_BUILTIN(BUILT_IN_VARARGS_START,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:474:1: note: use array indexing to silence this warning
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:477:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_GCC_BUILTIN(BUILT_IN_STDARG_START,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:477:1: note: use array indexing to silence this warning
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:477:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_GCC_BUILTIN(BUILT_IN_STDARG_START,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:477:1: note: use array indexing to silence this warning
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:480:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_GCC_BUILTIN(BUILT_IN_VA_END,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:480:1: note: use array indexing to silence this warning
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:480:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_GCC_BUILTIN(BUILT_IN_VA_END,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:480:1: note: use array indexing to silence this warning
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:483:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_GCC_BUILTIN(BUILT_IN_VA_COPY,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:483:1: note: use array indexing to silence this warning
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:483:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_GCC_BUILTIN(BUILT_IN_VA_COPY,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:483:1: note: use array indexing to silence this warning
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
In file included from c-common.c:2831:
./builtins.def:486:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_GCC_BUILTIN(BUILT_IN_EXPECT,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                     ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:486:1: note: use array indexing to silence this warning
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^
c-common.c:2816:15: note: expanded from macro 'DEF_BUILTIN'
                                  ? (NAME + strlen ("__builtin_"))      \
                                          ^
In file included from c-common.c:2831:
./builtins.def:486:1: warning: adding 'unsigned int' to a string does not append to the string [-Wstring-plus-int]
DEF_GCC_BUILTIN(BUILT_IN_EXPECT,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                   ~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./builtins.def:486:1: note: use array indexing to silence this warning
./builtins.def:60:3: note: expanded from macro 'DEF_GCC_BUILTIN'
  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,      \
  ^
c-common.c:2820:13: note: expanded from macro 'DEF_BUILTIN'
                                   NAME + strlen ("__builtin_"),        \
                                        ^
c-typeck.c:6891:36: warning: implicit conversion from enumeration type 'enum c_tree_code' to different enumeration type 'enum tree_code' [-Wenum-conversion]
      stmt = add_stmt (build_stmt (ASM_STMT, NULL_TREE, expr,
                       ~~~~~~~~~~  ^~~~~~~~
c-typeck.c:6968:32: warning: implicit conversion from enumeration type 'enum c_tree_code' to different enumeration type 'enum tree_code' [-Wenum-conversion]
  return add_stmt (build_stmt (ASM_STMT, cv_qualifier, string,
                   ~~~~~~~~~~  ^~~~~~~~
c-common.c:3207:10: warning: case value not in enumerated type 'enum tree_code' [-Wswitch]
    case EXPR_STMT:
         ^
c-common.c:3208:10: warning: case value not in enumerated type 'enum tree_code' [-Wswitch]
    case COMPOUND_STMT:
         ^
c-common.c:3209:10: warning: case value not in enumerated type 'enum tree_code' [-Wswitch]
    case DECL_STMT:
         ^
c-common.c:3210:10: warning: case value not in enumerated type 'enum tree_code' [-Wswitch]
    case IF_STMT:
         ^
c-common.c:3211:10: warning: case value not in enumerated type 'enum tree_code' [-Wswitch]
    case FOR_STMT:
         ^
c-common.c:3212:10: warning: case value not in enumerated type 'enum tree_code' [-Wswitch]
    case WHILE_STMT:
         ^
c-common.c:3213:10: warning: case value not in enumerated type 'enum tree_code' [-Wswitch]
    case DO_STMT:
         ^
c-common.c:3214:10: warning: case value not in enumerated type 'enum tree_code' [-Wswitch]
    case RETURN_STMT:
         ^
c-common.c:3215:10: warning: case value not in enumerated type 'enum tree_code' [-Wswitch]
    case BREAK_STMT:
         ^
c-common.c:3216:10: warning: case value not in enumerated type 'enum tree_code' [-Wswitch]
    case CONTINUE_STMT:
         ^
c-common.c:3218:10: warning: case value not in enumerated type 'enum tree_code' [-Wswitch]
    case SWITCH_STMT:
         ^
c-common.c:3219:10: warning: case value not in enumerated type 'enum tree_code' [-Wswitch]
    case GOTO_STMT:
         ^
c-common.c:3220:10: warning: case value not in enumerated type 'enum tree_code' [-Wswitch]
    case LABEL_STMT:
         ^
c-common.c:3221:10: warning: case value not in enumerated type 'enum tree_code' [-Wswitch]
    case ASM_STMT:
         ^
c-common.c:3217:10: warning: case value not in enumerated type 'enum tree_code' [-Wswitch]
    case SCOPE_STMT:
         ^
c-common.c:3222:10: warning: case value not in enumerated type 'enum tree_code' [-Wswitch]
    case FILE_STMT:
         ^
c-common.c:3223:10: warning: case value not in enumerated type 'enum tree_code' [-Wswitch]
    case CASE_LABEL:
         ^
c-common.c:3206:10: warning: case value not in enumerated type 'enum tree_code' [-Wswitch]
    case CLEANUP_STMT:
         ^
c-typeck.c:7185:33: warning: implicit conversion from enumeration type 'enum c_tree_code' to different enumeration type 'enum tree_code' [-Wenum-conversion]
  cs->switch_stmt = build_stmt (SWITCH_STMT, exp, NULL_TREE, orig_type);
                    ~~~~~~~~~~  ^~~~~~~~~~~
c-common.c:3562:10: warning: case value not in enumerated type 'enum tree_code' [-Wswitch]
    case STMT_EXPR:
         ^
c-common.c:3636:10: warning: case value not in enumerated type 'enum tree_code' [-Wswitch]
    case COMPOUND_LITERAL_EXPR:
         ^
c-objc-common.c:109:10: warning: case value not in enumerated type 'enum tree_code' [-Wswitch]
    case DECL_STMT:
         ^
c-objc-common.c:116:10: warning: case value not in enumerated type 'enum tree_code' [-Wswitch]
    case GOTO_STMT:
         ^
c-semantics.c:60:18: warning: implicit conversion from enumeration type 'enum c_tree_code' to different enumeration type 'enum tree_code' [-Wenum-conversion]
  *t = build_nt (EXPR_STMT, void_zero_node);
       ~~~~~~~~  ^~~~~~~~~
2 warnings generated.
c-semantics.c:80:25: warning: implicit conversion from enumeration type 'enum c_tree_code' to different enumeration type 'enum tree_code' [-Wenum-conversion]
          tree pos = build_nt (FILE_STMT, get_identifier (input_filename));
                     ~~~~~~~~  ^~~~~~~~~
c-semantics.c:110:27: warning: implicit conversion from enumeration type 'enum c_tree_code' to different enumeration type 'enum tree_code' [-Wenum-conversion]
  decl_stmt = build_stmt (DECL_STMT, decl);
              ~~~~~~~~~~  ^~~~~~~~~
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o cpplib.o -DSPEC_CPU -DNDEBUG -I.   -O2                cpplib.c
c-semantics.c:134:20: warning: implicit conversion from enumeration type 'enum c_tree_code' to different enumeration type 'enum tree_code' [-Wenum-conversion]
  ss = build_stmt (SCOPE_STMT, NULL_TREE);
       ~~~~~~~~~~  ^~~~~~~~~~
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o cpplex.o -DSPEC_CPU -DNDEBUG -I.   -O2                cpplex.c
c-semantics.c:478:23: warning: implicit conversion from enumeration type 'enum c_tree_code' to different enumeration type 'enum tree_code' [-Wenum-conversion]
  return (build_stmt (RETURN_STMT, expr));
          ~~~~~~~~~~  ^~~~~~~~~~~
c-semantics.c:553:23: warning: implicit conversion from enumeration type 'enum c_tree_code' to different enumeration type 'enum tree_code' [-Wenum-conversion]
  return (build_stmt (BREAK_STMT));
          ~~~~~~~~~~  ^~~~~~~~~~
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
c-semantics.c:571:23: warning: implicit conversion from enumeration type 'enum c_tree_code' to different enumeration type 'enum tree_code' [-Wenum-conversion]
  return (build_stmt (CONTINUE_STMT));
          ~~~~~~~~~~  ^~~~~~~~~~~~~
c-semantics.c:658:22: warning: implicit conversion from enumeration type 'enum c_tree_code' to different enumeration type 'enum tree_code' [-Wenum-conversion]
  return build_stmt (CASE_LABEL, low_value, high_value, label_decl);
         ~~~~~~~~~~  ^~~~~~~~~~
c-semantics.c:785:7: warning: case value not in enumerated type 'enum tree_code' [-Wswitch]
        case EXPR_STMT:
             ^
c-semantics.c:812:7: warning: case value not in enumerated type 'enum tree_code' [-Wswitch]
        case COMPOUND_STMT:
             ^
c-semantics.c:792:7: warning: case value not in enumerated type 'enum tree_code' [-Wswitch]
        case DECL_STMT:
             ^
c-semantics.c:808:7: warning: case value not in enumerated type 'enum tree_code' [-Wswitch]
        case IF_STMT:
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o cppmacro.o -DSPEC_CPU -DNDEBUG -I.   -O2                cppmacro.c
             ^
c-semantics.c:796:7: warning: case value not in enumerated type 'enum tree_code' [-Wswitch]
        case FOR_STMT:
             ^
c-semantics.c:800:7: warning: case value not in enumerated type 'enum tree_code' [-Wswitch]
        case WHILE_STMT:
             ^
c-semantics.c:804:7: warning: case value not in enumerated type 'enum tree_code' [-Wswitch]
        case DO_STMT:
             ^
c-semantics.c:781:7: warning: case value not in enumerated type 'enum tree_code' [-Wswitch]
        case RETURN_STMT:
             ^
c-semantics.c:816:7: warning: case value not in enumerated type 'enum tree_code' [-Wswitch]
        case BREAK_STMT:
             ^
c-semantics.c:820:7: warning: case value not in enumerated type 'enum tree_code' [-Wswitch]
        case CONTINUE_STMT:
8             ^
 warnings generatedc-semantics.c.
:824:7: warning: case value not in enumerated type 'enum tree_code' [-Wswitch]
        case SWITCH_STMT:
             ^
c-semantics.c:836:7: warning: case value not in enumerated type 'enum tree_code' [-Wswitch]
        case GOTO_STMT:
             ^
c-semantics.c:832:7: warning: case value not in enumerated type 'enum tree_code' [-Wswitch]
        case LABEL_STMT:
             ^
c-semantics.c:840:7: warning: case value not in enumerated type 'enum tree_code' [-Wswitch]
        case ASM_STMT:
             ^
c-semantics.c:846:7: warning: case value not in enumerated type 'enum tree_code' [-Wswitch]
        case SCOPE_STMT:
             ^
c-semantics.c:777:7: warning: case value not in enumerated type 'enum tree_code' [-Wswitch]
        case FILE_STMT:
             ^
c-semantics.c:828:7: warning: case value not in enumerated type 'enum tree_code' [-Wswitch]
        case CASE_LABEL:
             ^
c-semantics.c:850:7: warning: case value not in enumerated type 'enum tree_code' [-Wswitch]
        case CLEANUP_STMT:
             ^
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
cpplib.c:202:18: warning: incompatible pointer types initializing 'const U_CHAR *' (aka 'const unsigned char *') with an expression of type 'unsigned int [2]' [-Wincompatible-pointer-types]
  do_linemarker, U"#", 1, KANDR, IN_I
                 ^~~~
cpplib.c:564:9: warning: incompatible pointer types assigning to 'const unsigned char *' from 'unsigned int [18]' [-Wincompatible-pointer-types]
    dir = U"pragma dependency";
        ^ ~~~~~~~~~~~~~~~~~~~~
26 warnings generated.
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o cppexp.o -DSPEC_CPU -DNDEBUG -I.   -O2                cppexp.c
cpplex.c:59:3: warning: incompatible pointer types initializing 'const unsigned char *const' with an expression of type 'unsigned int [3]' [-Wincompatible-pointer-types]
{ U"%:", U"%:%:", U"<:", U":>", U"<%", U"%>" };
  ^~~~~
cpplex.c:59:10: warning: incompatible pointer types initializing 'const unsigned char *const' with an expression of type 'unsigned int [5]' [-Wincompatible-pointer-types]
{ U"%:", U"%:%:", U"<:", U":>", U"<%", U"%>" };
         ^~~~~~~
cpplex.c:59:19: warning: incompatible pointer types initializing 'const unsigned char *const' with an expression of type 'unsigned int [3]' [-Wincompatible-pointer-types]
{ U"%:", U"%:%:", U"<:", U":>", U"<%", U"%>" };
                  ^~~~~
cpplex.c:59:26: warning: incompatible pointer types initializing 'const unsigned char *const' with an expression of type 'unsigned int [3]' [-Wincompatible-pointer-types]
{ U"%:", U"%:%:", U"<:", U":>", U"<%", U"%>" };
                         ^~~~~
cpplex.c:59:33: warning: incompatible pointer types initializing 'const unsigned char *const' with an expression of type 'unsigned int [3]' [-Wincompatible-pointer-types]
{ U"%:", U"%:%:", U"<:", U":>", U"<%", U"%>" };
                                ^~~~~
cpplex.c:59:40: warning: clang-12incompatible pointer types initializing 'const unsigned char *const' with an expression of type 'unsigned int [3]' [-Wincompatible-pointer-types]
{ U"%:", U"%:%:", U"<:", U":>", U"<%", U"%>" };
                                       ^~~~~
: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o cppfiles.o -DSPEC_CPU -DNDEBUG -I.   -O2                cppfiles.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
cppfiles.c:393:29: warning: shifting a negative signed value is undefined [-Wshift-negative-value]
      if (inc->st.st_size > INTTYPE_MAXIMUM (ssize_t))
                            ^~~~~~~~~~~~~~~~~~~~~~~~~
./system.h:192:44: note: expanded from macro 'INTTYPE_MAXIMUM'
#define INTTYPE_MAXIMUM(t) ((t) (~ (t) 0 - INTTYPE_MINIMUM (t)))
                                           ^~~~~~~~~~~~~~~~~~~
./system.h:191:40: note: expanded from macro 'INTTYPE_MINIMUM'
                             ? ~ (t) 0 << (sizeof(t) * CHAR_BIT - 1) : (t) 0))
                               ~~~~~~~ ^
2 warnings generated.
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o cpphash.o -DSPEC_CPU -DNDEBUG -I.   -O2                cpphash.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o cpperror.o -DSPEC_CPU -DNDEBUG -I.   -O2                cpperror.c
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
6 warnings generated.
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o cppinit.o -DSPEC_CPU -DNDEBUG -I.   -O2                cppinit.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o cppdefault.o -DSPEC_CPU -DNDEBUG -I.   -O2                cppdefault.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
clang-121 warning generated.
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o line-map.o -DSPEC_CPU -DNDEBUG -I.   -O2                line-map.c
: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o mkdeps.o -DSPEC_CPU -DNDEBUG -I.   -O2                mkdeps.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o prefix.o -DSPEC_CPU -DNDEBUG -I.   -O2                prefix.c
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o version.o -DSPEC_CPU -DNDEBUG -I.   -O2                version.c
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o mbchar.o -DSPEC_CPU -DNDEBUG -I.   -O2                mbchar.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o alias.o -DSPEC_CPU -DNDEBUG -I.   -O2                alias.c
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o bb-reorder.o -DSPEC_CPU -DNDEBUG -I.   -O2                bb-reorder.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o bitmap.o -DSPEC_CPU -DNDEBUG -I.   -O2                bitmap.c
clang-12: warning: /mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o builtins.o -DSPEC_CPU -DNDEBUG -I.   -O2                builtins.c
-Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
214 warnings generated.
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o caller-save.o -DSPEC_CPU -DNDEBUG -I.   -O2                caller-save.c
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o calls.o -DSPEC_CPU -DNDEBUG -I.   -O2                calls.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
3 warnings generated.
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o cfg.o -DSPEC_CPU -DNDEBUG -I.   -O2                cfg.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o cfganal.o -DSPEC_CPU -DNDEBUG -I.   -O2                cfganal.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: calls.c:613:48: warning: implicit conversion from enumeration type 'enum reg_note' to different enumeration type 'enum machine_mode' [-Wenum-conversion]
    REG_NOTES (call_insn) = gen_rtx_EXPR_LIST (REG_EH_REGION, const0_rtx,
                            ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~
./genrtl.h:122:31: note: expanded from macro 'gen_rtx_EXPR_LIST'
  gen_rtx_fmt_ee (EXPR_LIST, (MODE), (ARG0), (ARG1))
  ~~~~~~~~~~~~~~              ^~~~
calls.c:617:48: warning: implicit conversion from enumeration type 'enum reg_note' to different enumeration type 'enum machine_mode' [-Wenum-conversion]
    REG_NOTES (call_insn) = gen_rtx_EXPR_LIST (REG_NORETURN, const0_rtx,
                            ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~
./genrtl.h:122:31: note: expanded from macro 'gen_rtx_EXPR_LIST'
  gen_rtx_fmt_ee (EXPR_LIST, (MODE), (ARG0), (ARG1))
  ~~~~~~~~~~~~~~              ^~~~
calls.c:620:48: warning: implicit conversion from enumeration type 'enum reg_note' to different enumeration type 'enum machine_mode' [-Wenum-conversion]warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]

    REG_NOTES (call_insn) = gen_rtx_EXPR_LIST (REG_ALWAYS_RETURN, const0_rtx,
                            ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./genrtl.h:122:31: note: expanded from macro 'gen_rtx_EXPR_LIST'
  gen_rtx_fmt_ee (EXPR_LIST, (MODE), (ARG0), (ARG1))
  ~~~~~~~~~~~~~~              ^~~~
calls.c:625:50: warning: implicit conversion from enumeration type 'enum reg_note' to different enumeration type 'enum machine_mode' [-Wenum-conversion]
      REG_NOTES (call_insn) = gen_rtx_EXPR_LIST (REG_SETJMP, const0_rtx,
                              ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./genrtl.h:122:31: note: expanded from macro 'gen_rtx_EXPR_LIST'
  gen_rtx_fmt_ee (EXPR_LIST, (MODE), (ARG0), (ARG1))
  ~~~~~~~~~~~~~~              ^~~~
calls.c:3123:25: warning: implicit conversion from enumeration type 'enum reg_note' to different enumeration type 'enum machine_mode' [-Wenum-conversion]
            gen_rtx_EXPR_LIST (REG_NOALIAS, temp, REG_NOTES (last));
            ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./genrtl.h:122:31: note: expanded from macro 'gen_rtx_EXPR_LIST'
  gen_rtx_fmt_ee (EXPR_LIST, (MODE), (ARG0), (ARG1))
  ~~~~~~~~~~~~~~              ^~~~
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o cfgbuild.o -DSPEC_CPU -DNDEBUG -I.   -O2                cfgbuild.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o cfgcleanup.o -DSPEC_CPU -DNDEBUG -I.   -O2                cfgcleanup.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o cfglayout.o -DSPEC_CPU -DNDEBUG -I.   -O2                cfglayout.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
5 warnings generated.
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o cfgloop.o -DSPEC_CPU -DNDEBUG -I.   -O2                cfgloop.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o cfgrtl.o -DSPEC_CPU -DNDEBUG -I.   -O2                cfgrtl.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o combine.o -DSPEC_CPU -DNDEBUG -I.   -O2                combine.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o conflict.o -DSPEC_CPU -DNDEBUG -I.   -O2                conflict.c
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o convert.o -DSPEC_CPU -DNDEBUG -I.   -O2                convert.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o cse.o -DSPEC_CPU -DNDEBUG -I.   -O2                cse.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
combine.c:2718:41: warning: implicit conversion from enumeration type 'enum reg_note' to different enumeration type 'enum machine_mode' [-Wenum-conversion]
          distribute_notes (gen_rtx_EXPR_LIST (REG_DEAD, i3dest_killed,
                            ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~
./genrtl.h:122:31: note: expanded from macro 'gen_rtx_EXPR_LIST'
  gen_rtx_fmt_ee (EXPR_LIST, (MODE), (ARG0), (ARG1))
  ~~~~~~~~~~~~~~              ^~~~
combine.c:2722:41: warning: implicit conversion from enumeration type 'enum reg_note' to different enumeration type 'enum machine_mode' [-Wenum-conversion]
          distribute_notes (gen_rtx_EXPR_LIST (REG_DEAD, i3dest_killed,
                            ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~
./genrtl.h:122:31: note: expanded from macro 'gen_rtx_EXPR_LIST'
  gen_rtx_fmt_ee (EXPR_LIST, (MODE), (ARG0), (ARG1))
  ~~~~~~~~~~~~~~              ^~~~
combine.c:2734:41: warning: implicit conversion from enumeration type 'enum reg_note' to different enumeration type 'enum machine_mode' [-Wenum-conversion]
          distribute_notes (gen_rtx_EXPR_LIST (REG_DEAD, i2dest, NULL_RTX),
                            ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~
./genrtl.h:122:31: note: expanded from macro 'gen_rtx_EXPR_LIST'
  gen_rtx_fmt_ee (EXPR_LIST, (MODE), (ARG0), (ARG1))
  ~~~~~~~~~~~~~~              ^~~~
combine.c:2737:41: warning: implicit conversion from enumeration type 'enum reg_note' to different enumeration type 'enum machine_mode' [-Wenum-conversion]
          distribute_notes (gen_rtx_EXPR_LIST (REG_DEAD, i2dest, NULL_RTX),
                            ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~
./genrtl.h:122:31: note: expanded from macro 'gen_rtx_EXPR_LIST'
  gen_rtx_fmt_ee (EXPR_LIST, (MODE), (ARG0), (ARG1))
  ~~~~~~~~~~~~~~              ^~~~
combine.c:2748:41: warning: implicit conversion from enumeration type 'enum reg_note' to different enumeration type 'enum machine_mode' [-Wenum-conversion]
          distribute_notes (gen_rtx_EXPR_LIST (REG_DEAD, i1dest, NULL_RTX),
                            ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o cselib.o -DSPEC_CPU -DNDEBUG -I.   -O2                cselib.c
./genrtl.h:122:31: note: expanded from macro 'gen_rtx_EXPR_LIST'
  gen_rtx_fmt_ee (EXPR_LIST, (MODE), (ARG0), (ARG1))
  ~~~~~~~~~~~~~~              ^~~~
combine.c:2751:41: warning: implicit conversion from enumeration type 'enum reg_note' to different enumeration type 'enum machine_mode' [-Wenum-conversion]
          distribute_notes (gen_rtx_EXPR_LIST (REG_DEAD, i1dest, NULL_RTX),
                            ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~
./genrtl.h:122:31: note: expanded from macro 'gen_rtx_EXPR_LIST'
  gen_rtx_fmt_ee (EXPR_LIST, (MODE), (ARG0), (ARG1))
  ~~~~~~~~~~~~~~              ^~~~
5 warnings generated.
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o dbxout.o -DSPEC_CPU -DNDEBUG -I.   -O2                dbxout.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o debug.o -DSPEC_CPU -DNDEBUG -I.   -O2                debug.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o dependence.o -DSPEC_CPU -DNDEBUG -I.   -O2                dependence.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
combine.c:9741:31: warning: implicit conversion from enumeration type 'enum reg_note' to different enumeration type 'enum machine_mode' [-Wenum-conversion]
          notes = gen_rtx_EXPR_LIST (REG_UNUSED,
                  ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~
./genrtl.h:122:31: note: expanded from macro 'gen_rtx_EXPR_LIST'
  gen_rtx_fmt_ee (EXPR_LIST, (MODE), (ARG0), (ARG1))
  ~~~~~~~~~~~~~~              ^~~~
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o df.o -DSPEC_CPU -DNDEBUG -I.   -O2                df.c
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o diagnostic.o -DSPEC_CPU -DNDEBUG -I.   -O2                diagnostic.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
combine.c:11918:28: warning: implicit conversion from enumeration type 'enum reg_note' to different enumeration type 'enum machine_mode' [-Wenum-conversion]
                    = gen_rtx_EXPR_LIST (REG_DEAD,
                      ~~~~~~~~~~~~~~~~~~~^~~~~~~~~
./genrtl.h:122:31: note: expanded from macro 'gen_rtx_EXPR_LIST'
  gen_rtx_fmt_ee (EXPR_LIST, (MODE), (ARG0), (ARG1))
  ~~~~~~~~~~~~~~              ^~~~
combine.c:11956:35: warning: implicit conversion from enumeration type 'enum reg_note' to different enumeration type 'enum machine_mode' [-Wenum-conversion]
            *pnotes = gen_rtx_EXPR_LIST (REG_DEAD, x, *pnotes);
                      ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~
./genrtl.h:122:31: note: expanded from macro 'gen_rtx_EXPR_LIST'
  gen_rtx_fmt_ee (EXPR_LIST, (MODE), (ARG0), (ARG1))
  ~~~~~~~~~~~~~~              ^~~~
dependence.c:392:12: warning: case value not in enumerated type 'enum tree_code' [-Wswitch]
      case EXPR_STMT:
           ^
dependence.c:284:12: warning: case value not in enumerated type 'enum tree_code' [-Wswitch]
      case COMPOUND_STMT:
           ^
dependence.c:388:12combine.c:12446:31: warning: implicit conversion from enumeration type 'enum reg_note' to different enumeration type 'enum machine_mode' [-Wenum-conversion]
                              = gen_rtx_EXPR_LIST (REG_UNUSED, XEXP (note, 0),
                                ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~
./genrtl.h:122:31: note: expanded from macro 'gen_rtx_EXPR_LIST'
  gen_rtx_fmt_ee (EXPR_LIST, (MODE), (ARG0), (ARG1))
  ~~~~~~~~~~~~~~              ^~~~
: warning: clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
case value not in enumerated type 'enum tree_code' [-Wswitch]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
      case DECL_STMT:
           ^
dependence.c:294:12: warning: case value not in enumerated type 'enum tree_code' [-Wswitch]
      case FOR_STMT:
           ^
dependence.ccombine.c:12576:26: warning: implicit conversion from enumeration type 'enum reg_note' to different enumeration type 'enum machine_mode' [-Wenum-conversion]
                                = gen_rtx_EXPR_LIST (REG_DEAD, piece, NULL_RTX);
                                  ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~
./genrtl.h:122:31: note: expanded from macro 'gen_rtx_EXPR_LIST'
  gen_rtx_fmt_ee (EXPR_LIST, (MODE), (ARG0), (ARG1))
  ~~~~~~~~~~~~~~              ^~~~
:387:combine.c:12603:32: warning: implicit conversion from enumeration type 'enum reg_note' to different enumeration type 'enum machine_mode' [-Wenum-conversion]
                                      = gen_rtx_EXPR_LIST (REG_UNUSED, piece,
                                        ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~
./genrtl.h:122:31: note: expanded from macro 'gen_rtx_EXPR_LIST'
  gen_rtx_fmt_ee (EXPR_LIST, (MODE), (ARG0), (ARG1))
  ~~~~~~~~~~~~~~              ^~~~
12: warning: case value not in enumerated type 'enum tree_code' [-Wswitch]
      case SCOPE_STMT:
           ^
combine.c:12641:13: warning: implicit conversion from enumeration type 'enum reg_note' to different enumeration type 'enum machine_mode' [-Wenum-conversion]
                                               REG_NOTE_KIND (note),
                                               ^~~~~~~~~~~~~~~~~~~~
./rtl.h:601:30: note: expanded from macro 'REG_NOTE_KIND'
#define REG_NOTE_KIND(LINK) ((enum reg_note) GET_MODE (LINK))
                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o doloop.o -DSPEC_CPU -DNDEBUG -I.   -O2                doloop.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]cse.c:5723:27: warning: implicit conversion from enumeration type 'enum reg_note' to different enumeration type 'enum machine_mode' [-Wenum-conversion]
                          = gen_rtx_INSN_LIST (REG_WAS_0, const_insn,
                            ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~
./genrtl.h:124:31: note: expanded from macro 'gen_rtx_INSN_LIST'
  gen_rtx_fmt_ue (INSN_LIST, (MODE), (ARG0), (ARG1))
  ~~~~~~~~~~~~~~              ^~~~

clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
doloop.c:528:23: warning: implicit conversion from enumeration type 'enum reg_note' to different enumeration type 'enum machine_mode' [-Wenum-conversion]
        = gen_rtx_EXPR_LIST (REG_NONNEG, NULL_RTX, REG_NOTES (jump_insn));
          ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./genrtl.h:122:31: note: expanded from macro 'gen_rtx_EXPR_LIST'
  gen_rtx_fmt_ee (EXPR_LIST, (MODE), (ARG0), (ARG1))
  ~~~~~~~~~~~~~~              ^~~~
1 warning generated.
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o dominance.o -DSPEC_CPU -DNDEBUG -I.   -O2                dominance.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o dwarf2asm.o -DSPEC_CPU -DNDEBUG -I.   -O2                dwarf2asm.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o dwarf2out.o -DSPEC_CPU -DNDEBUG -I.   -O2                dwarf2out.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o dwarfout.o -DSPEC_CPU -DNDEBUG -I.   -O2                dwarfout.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o emit-rtl.o -DSPEC_CPU -DNDEBUG -I.   -O2                emit-rtl.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
5 warnings generated.
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o except.o -DSPEC_CPU -DNDEBUG -I.   -O2                except.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o explow.o -DSPEC_CPU -DNDEBUG -I.   -O2                explow.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o expmed.o -DSPEC_CPU -DNDEBUG -I.   -O2                expmed.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
emit-rtl.c:3155:30: warning: implicit conversion from enumeration type 'enum reg_note' to different enumeration type 'enum machine_mode' [-Wenum-conversion]
                      = gen_rtx_EXPR_LIST (REG_BR_PROB,
                        ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~
./genrtl.h:122:31: note: expanded from macro 'gen_rtx_EXPR_LIST'
  gen_rtx_fmt_ee (EXPR_LIST, (MODE), (ARG0), (ARG1))
  ~~~~~~~~~~~~~~              ^~~~
emit-rtl.c:3182:27: warning: implicit conversion from enumeration type 'enum reg_note' to different enumeration type 'enum machine_mode' [-Wenum-conversion]
                          = gen_rtx_EXPR_LIST (REG_EH_REGION,
                            ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~
./genrtl.h:122:31: note: expanded from macro 'gen_rtx_EXPR_LIST'
  gen_rtx_fmt_ee (EXPR_LIST, (MODE), (ARG0), (ARG1))
  ~~~~~~~~~~~~~~              ^~~~
emit-rtl.c:3196:27: warning: implicit conversion from enumeration type 'enum reg_note' to different enumeration type 'enum machine_mode' [-Wenum-conversion]
                          = gen_rtx_EXPR_LIST (REG_NOTE_KIND (note),
                            ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~
./rtl.h:601:30: note: expanded from macro 'REG_NOTE_KIND'
#define REG_NOTE_KIND(LINK) ((enum reg_note) GET_MODE (LINK))
                             ^
./genrtl.h:122:31: note: expanded from macro 'gen_rtx_EXPR_LIST'
  gen_rtx_fmt_ee (EXPR_LIST, (MODE), (ARG0), (ARG1))
  ~~~~~~~~~~~~~~              ^~~~
emit-rtl.c:3208:27: warning: implicit conversion from enumeration type 'enum reg_note' to different enumeration type 'enum machine_mode' [-Wenum-conversion]
                          = gen_rtx_EXPR_LIST (REG_NOTE_KIND (note),
                            ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~
./rtl.h:601:30: note: expanded from macro 'REG_NOTE_KIND'
#define REG_NOTE_KIND(LINK) ((enum reg_note) GET_MODE (LINK))
                             ^
./genrtl.h:122:31: note: expanded from macro 'gen_rtx_EXPR_LIST'
  gen_rtx_fmt_ee (EXPR_LIST, (MODE), (ARG0), (ARG1))
  ~~~~~~~~~~~~~~              ^~~~
emit-rtl.c:4355:41: warning: implicit conversion from enumeration type 'enum reg_note' to different enumeration type 'enum machine_mode' [-Wenum-conversion]
  REG_NOTES (insn) = gen_rtx_EXPR_LIST (kind, datum, REG_NOTES (insn));
                     ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./genrtl.h:122:31: note: expanded from macro 'gen_rtx_EXPR_LIST'
  gen_rtx_fmt_ee (EXPR_LIST, (MODE), (ARG0), (ARG1))
  ~~~~~~~~~~~~~~              ^~~~
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o expr.o -DSPEC_CPU -DNDEBUG -I.   -O2                expr.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
expr.c:4941:22: warning: implicit conversion from enumeration type 'enum rtx_code' to different enumeration type 'enum machine_mode' [-Wenum-conversion]
                                       NULL_RTX, MEM, EXPAND_CONST_ADDRESS);
                                                 ^~~
expr.c:4957:52: warning: implicit conversion from enumeration type 'enum rtx_code' to different enumeration type 'enum machine_mode' [-Wenum-conversion]
          startbit_rtx = expand_expr (startbit, NULL_RTX, MEM,
                         ~~~~~~~~~~~                      ^~~
expr.c:4959:48: warning: implicit conversion from enumeration type 'enum rtx_code' to different enumeration type 'enum machine_mode' [-Wenum-conversion]
          endbit_rtx = expand_expr (endbit, NULL_RTX, MEM,
                       ~~~~~~~~~~~                    ^~~
expr.c:7146:25: warning: implicit conversion from enumeration type 'enum reg_note' to different enumeration type 'enum machine_mode' [-Wenum-conversion]
          = gen_rtx_EXPR_LIST (REG_VTABLE_REF, vtbl_ref, REG_NOTES (insn));
            ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./genrtl.h:122:31: note: expanded from macro 'gen_rtx_EXPR_LIST'
  gen_rtx_fmt_ee (EXPR_LIST, (MODE), (ARG0), (ARG1))
  ~~~~~~~~~~~~~~              ^~~~
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o final.o -DSPEC_CPU -DNDEBUG -I.   -O2                final.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
expr.c:8895:10: warning: logical not is only applied to the left hand side of this comparison [-Wlogical-not-parentheses]
      || !exact_log2 (tree_low_cst (TREE_OPERAND (offset, 1), 1) + 1) < 0)
         ^                                                            ~
expr.c:8895:10: note: add parentheses after the '!' to evaluate the comparison first
      || !exact_log2 (tree_low_cst (TREE_OPERAND (offset, 1), 1) + 1) < 0)
         ^
          (                                                              )
expr.c:8895:10: note: add parentheses around left hand side expression to silence this warning
      || !exact_log2 (tree_low_cst (TREE_OPERAND (offset, 1), 1) + 1) < 0)
         ^
         (                                                           )
expr.c:8895:71: warning: result of comparison of constant 0 with boolean expression is always false [-Wtautological-constant-compare]
      || !exact_log2 (tree_low_cst (TREE_OPERAND (offset, 1), 1) + 1) < 0)
         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^ ~
5 warnings generated.
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o flow.o -DSPEC_CPU -DNDEBUG -I.   -O2                flow.c
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o fold-const.o -DSPEC_CPU -DNDEBUG -I.   -O2                fold-const.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o function.o -DSPEC_CPU -DNDEBUG -I.   -O2                function.c
flow.c:821:28: warning: implicit conversion from enumeration type 'enum reg_note' to different enumeration type 'enum machine_mode' [-Wenum-conversion]
                    = gen_rtx_INSN_LIST (REG_LIBCALL, XEXP (note, 0),
                      ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./genrtl.h:124:31: note: expanded from macro 'gen_rtx_INSN_LIST'
  gen_rtx_fmt_ue (INSN_LIST, (MODE), (ARG0), (ARG1))
  ~~~~~~~~~~~~~~              ^~~~
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o gcse.o -DSPEC_CPU -DNDEBUG -I.   -O2                gcse.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
function.c:5002:25: warning: implicit conversion from enumeration type 'enum reg_note' to different enumeration type 'enum machine_mode' [-Wenum-conversion]
                        = gen_rtx_EXPR_LIST (REG_EQUIV,
                          ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~
./genrtl.h:122:31: note: expanded from macro 'gen_rtx_EXPR_LIST'
  gen_rtx_fmt_ee (EXPR_LIST, (MODE), (ARG0), (ARG1))
  ~~~~~~~~~~~~~~              ^~~~
function.c:5008:25: warning: implicit conversion from enumeration type 'enum reg_note' to different enumeration type 'enum machine_mode' [-Wenum-conversion]
                        = gen_rtx_EXPR_LIST (REG_EQUIV,
                          ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~
./genrtl.h:122:31: note: expanded from macro 'gen_rtx_EXPR_LIST'
  gen_rtx_fmt_ee (EXPR_LIST, (MODE), (ARG0), (ARG1))
  ~~~~~~~~~~~~~~              ^~~~
function.c:5015:26: warning: implicit conversion from enumeration type 'enum reg_note' to different enumeration type 'enum machine_mode' [-Wenum-conversion]
                  = gen_rtx_EXPR_LIST (REG_EQUIV,
                    ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~
./genrtl.h:122:31: note: expanded from macro 'gen_rtx_EXPR_LIST'
  gen_rtx_fmt_ee (EXPR_LIST, (MODE), (ARG0), (ARG1))
  ~~~~~~~~~~~~~~              ^~~~
gcse.c:5149:45: warning: implicit conversion from enumeration type 'enum reg_note' to different enumeration type 'enum machine_mode' [-Wenum-conversion]
      REG_NOTES (insn) = gen_rtx_INSN_LIST (REG_LABEL, XEXP (x, 0),
                         ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./genrtl.h:124:31: note: expanded from macro 'gen_rtx_INSN_LIST'
  gen_rtx_fmt_ue (INSN_LIST, (MODE), (ARG0), (ARG1))
  ~~~~~~~~~~~~~~              ^~~~
1 warning generated.
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o genrtl.o -DSPEC_CPU -DNDEBUG -I.   -O2                genrtl.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
13 warnings generated.
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o ggc-common.o -DSPEC_CPU -DNDEBUG -I.   -O2                ggc-common.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o global.o -DSPEC_CPU -DNDEBUG -I.   -O2                global.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o graph.o -DSPEC_CPU -DNDEBUG -I.   -O2                graph.c
1 warning generated.
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o haifa-sched.o -DSPEC_CPU -DNDEBUG -I.   -O2                haifa-sched.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
6 warnings generated.
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o hash.o -DSPEC_CPU -DNDEBUG -I.   -O2                hash.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o hashtable.o -DSPEC_CPU -DNDEBUG -I.   -O2                hashtable.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o hooks.o -DSPEC_CPU -DNDEBUG -I.   -O2                hooks.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o ifcvt.o -DSPEC_CPU -DNDEBUG -I.   -O2                ifcvt.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o insn-attrtab.o -DSPEC_CPU -DNDEBUG -I.   -O2                insn-attrtab.c
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o insn-emit.o -DSPEC_CPU -DNDEBUG -I.   -O2                insn-emit.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
insn-attrtab.c:450:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_ATHLON)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~
insn-attrtab.c:450:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_ATHLON)))
          ~           ^              ~
insn-attrtab.c:450:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_ATHLON)))
                      ^~
                      =
insn-attrtab.c:516:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_ATHLON)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~
insn-attrtab.c:516:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_ATHLON)))
          ~           ^              ~
insn-attrtab.c:516:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_ATHLON)))
                      ^~
                      =
insn-attrtab.c:520:28: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      else if (((ix86_cpu) == (CPU_PENTIUM)))
                ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:520:28: note: remove extraneous parentheses around the comparison to silence this warning
      else if (((ix86_cpu) == (CPU_PENTIUM)))
               ~           ^               ~
insn-attrtab.c:520:28: note: use '=' to turn this equality comparison into an assignment
      else if (((ix86_cpu) == (CPU_PENTIUM)))
                           ^~
                           =
insn-attrtab.c:524:28: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      else if (((ix86_cpu) == (CPU_K6)))
                ~~~~~~~~~~~^~~~~~~~~~~
insn-attrtab.c:524:28: note: remove extraneous parentheses around the comparison to silence this warning
      else if (((ix86_cpu) == (CPU_K6)))
               ~           ^          ~
insn-attrtab.c:524:28: note: use '=' to turn this equality comparison into an assignment
      else if (((ix86_cpu) == (CPU_K6)))
                           ^~
                           =
insn-attrtab.c:545:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_ATHLON)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~
insn-attrtab.c:545:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_ATHLON)))
          ~           ^              ~
insn-attrtab.c:545:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_ATHLON)))
                      ^~
                      =
insn-attrtab.c:549:28: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      else if (((ix86_cpu) == (CPU_PENTIUM)))
                ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:549:28: note: remove extraneous parentheses around the comparison to silence this warning
      else if (((ix86_cpu) == (CPU_PENTIUM)))
               ~           ^               ~
insn-attrtab.c:549:28: note: use '=' to turn this equality comparison into an assignment
      else if (((ix86_cpu) == (CPU_PENTIUM)))
                           ^~
                           =
insn-attrtab.c:553:28: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      else if (((ix86_cpu) == (CPU_K6)))
                ~~~~~~~~~~~^~~~~~~~~~~
insn-attrtab.c:553:28: note: remove extraneous parentheses around the comparison to silence this warning
      else if (((ix86_cpu) == (CPU_K6)))
               ~           ^          ~
insn-attrtab.c:553:28: note: use '=' to turn this equality comparison into an assignment
      else if (((ix86_cpu) == (CPU_K6)))
                           ^~
                           =
insn-attrtab.c:557:28: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      else if (((ix86_cpu) == (CPU_PENTIUMPRO)))
                ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~
insn-attrtab.c:557:28: note: remove extraneous parentheses around the comparison to silence this warning
      else if (((ix86_cpu) == (CPU_PENTIUMPRO)))
               ~           ^                  ~
insn-attrtab.c:557:28: note: use '=' to turn this equality comparison into an assignment
      else if (((ix86_cpu) == (CPU_PENTIUMPRO)))
                           ^~
                           =
insn-attrtab.c:567:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUM)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:567:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUM)))
          ~           ^               ~
insn-attrtab.c:567:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUM)))
                      ^~
                      =
insn-attrtab.c:595:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_ATHLON)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~
insn-attrtab.c:595:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_ATHLON)))
          ~           ^              ~
insn-attrtab.c:595:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_ATHLON)))
                      ^~
                      =
insn-attrtab.c:599:28: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      else if (((ix86_cpu) == (CPU_PENTIUM)))
                ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:599:28: note: remove extraneous parentheses around the comparison to silence this warning
      else if (((ix86_cpu) == (CPU_PENTIUM)))
               ~           ^               ~
insn-attrtab.c:599:28: note: use '=' to turn this equality comparison into an assignment
      else if (((ix86_cpu) == (CPU_PENTIUM)))
                           ^~
                           =
insn-attrtab.c:870:28: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      else if (((ix86_cpu) == (CPU_ATHLON)))
                ~~~~~~~~~~~^~~~~~~~~~~~~~~
insn-attrtab.c:870:28: note: remove extraneous parentheses around the comparison to silence this warning
      else if (((ix86_cpu) == (CPU_ATHLON)))
               ~           ^              ~
insn-attrtab.c:870:28: note: use '=' to turn this equality comparison into an assignment
      else if (((ix86_cpu) == (CPU_ATHLON)))
                           ^~
                           =
insn-attrtab.c:878:28: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      else if (((ix86_cpu) == (CPU_K6)))
                ~~~~~~~~~~~^~~~~~~~~~~
insn-attrtab.c:878:28: note: remove extraneous parentheses around the comparison to silence this warning
      else if (((ix86_cpu) == (CPU_K6)))
               ~           ^          ~
insn-attrtab.c:878:28: note: use '=' to turn this equality comparison into an assignment
      else if (((ix86_cpu) == (CPU_K6)))
                           ^~
                           =
insn-attrtab.c:893:28: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      else if (((ix86_cpu) == (CPU_ATHLON)))
                ~~~~~~~~~~~^~~~~~~~~~~~~~~
insn-attrtab.c:893:28: note: remove extraneous parentheses around the comparison to silence this warning
      else if (((ix86_cpu) == (CPU_ATHLON)))
               ~           ^              ~
insn-attrtab.c:893:28: note: use '=' to turn this equality comparison into an assignment
      else if (((ix86_cpu) == (CPU_ATHLON)))
                           ^~
                           =
insn-attrtab.c:901:28: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      else if (((ix86_cpu) == (CPU_K6)))
                ~~~~~~~~~~~^~~~~~~~~~~
insn-attrtab.c:901:28: note: remove extraneous parentheses around the comparison to silence this warning
      else if (((ix86_cpu) == (CPU_K6)))
               ~           ^          ~
insn-attrtab.c:901:28: note: use '=' to turn this equality comparison into an assignment
      else if (((ix86_cpu) == (CPU_K6)))
                           ^~
                           =
insn-attrtab.c:941:28: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      else if (((ix86_cpu) == (CPU_ATHLON)))
                ~~~~~~~~~~~^~~~~~~~~~~~~~~
insn-attrtab.c:941:28: note: remove extraneous parentheses around the comparison to silence this warning
      else if (((ix86_cpu) == (CPU_ATHLON)))
               ~           ^              ~
insn-attrtab.c:941:28: note: use '=' to turn this equality comparison into an assignment
      else if (((ix86_cpu) == (CPU_ATHLON)))
                           ^~
                           =
insn-attrtab.c:949:28: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      else if (((ix86_cpu) == (CPU_K6)))
                ~~~~~~~~~~~^~~~~~~~~~~
insn-attrtab.c:949:28: note: remove extraneous parentheses around the comparison to silence this warning
      else if (((ix86_cpu) == (CPU_K6)))
               ~           ^          ~
insn-attrtab.c:949:28: note: use '=' to turn this equality comparison into an assignment
      else if (((ix86_cpu) == (CPU_K6)))
                           ^~
                           =
insn-attrtab.c:1181:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUMPRO)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~
insn-attrtab.c:1181:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUMPRO)))
          ~           ^                  ~
insn-attrtab.c:1181:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUMPRO)))
                      ^~
                      =
insn-attrtab.c:1257:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUM)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:1257:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUM)))
          ~           ^               ~
insn-attrtab.c:1257:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUM)))
                      ^~
                      =
insn-attrtab.c:1261:28: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      else if (((ix86_cpu) == (CPU_ATHLON)))
                ~~~~~~~~~~~^~~~~~~~~~~~~~~
insn-attrtab.c:1261:28: note: remove extraneous parentheses around the comparison to silence this warning
      else if (((ix86_cpu) == (CPU_ATHLON)))
               ~           ^              ~
insn-attrtab.c:1261:28: note: use '=' to turn this equality comparison into an assignment
      else if (((ix86_cpu) == (CPU_ATHLON)))
                           ^~
                           =
insn-attrtab.c:1291:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUM)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:1291:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUM)))
          ~           ^               ~
insn-attrtab.c:1291:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUM)))
                      ^~
                      =
insn-attrtab.c:1295:28: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      else if (((ix86_cpu) == (CPU_ATHLON)))
                ~~~~~~~~~~~^~~~~~~~~~~~~~~
insn-attrtab.c:1295:28: note: remove extraneous parentheses around the comparison to silence this warning
      else if (((ix86_cpu) == (CPU_ATHLON)))
               ~           ^              ~
insn-attrtab.c:1295:28: note: use '=' to turn this equality comparison into an assignment
      else if (((ix86_cpu) == (CPU_ATHLON)))
                           ^~
                           =
insn-attrtab.c:1299:28: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      else if (((ix86_cpu) == (CPU_PENTIUMPRO)))
                ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~
insn-attrtab.c:1299:28: note: remove extraneous parentheses around the comparison to silence this warning
      else if (((ix86_cpu) == (CPU_PENTIUMPRO)))
               ~           ^                  ~
insn-attrtab.c:1299:28: note: use '=' to turn this equality comparison into an assignment
      else if (((ix86_cpu) == (CPU_PENTIUMPRO)))
                           ^~
                           =
insn-attrtab.c:1303:28: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      else if (((ix86_cpu) == (CPU_K6)))
                ~~~~~~~~~~~^~~~~~~~~~~
insn-attrtab.c:1303:28: note: remove extraneous parentheses around the comparison to silence this warning
      else if (((ix86_cpu) == (CPU_K6)))
               ~           ^          ~
insn-attrtab.c:1303:28: note: use '=' to turn this equality comparison into an assignment
      else if (((ix86_cpu) == (CPU_K6)))
                           ^~
                           =
insn-attrtab.c:1475:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_K6)))
           ~~~~~~~~~~~^~~~~~~~~~~
insn-attrtab.c:1475:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_K6)))
          ~           ^          ~
insn-attrtab.c:1475:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_K6)))
                      ^~
                      =
insn-attrtab.c:1618:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o insn-extract.o -DSPEC_CPU -DNDEBUG -I.   -O2                insn-extract.c
      if (((ix86_cpu) == (CPU_ATHLON)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~
insn-attrtab.c:1618:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_ATHLON)))
          ~           ^              ~
insn-attrtab.c:1618:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_ATHLON)))
                      ^~
                      =
insn-attrtab.c:1626:28: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      else if (((ix86_cpu) == (CPU_K6)))
                ~~~~~~~~~~~^~~~~~~~~~~
insn-attrtab.c:1626:28: note: remove extraneous parentheses around the comparison to silence this warning
      else if (((ix86_cpu) == (CPU_K6)))
               ~           ^          ~
insn-attrtab.c:1626:28: note: use '=' to turn this equality comparison into an assignment
      else if (((ix86_cpu) == (CPU_K6)))
                           ^~
                           =
insn-attrtab.c:1888:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUMPRO)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~
insn-attrtab.c:1888:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUMPRO)))
          ~           ^                  ~
insn-attrtab.c:1888:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUMPRO)))
                      ^~
                      =
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o insn-opinit.o -DSPEC_CPU -DNDEBUG -I.   -O2                insn-opinit.c
insn-attrtab.c:2219:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_ATHLON)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~
insn-attrtab.c:2219:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_ATHLON)))
          ~           ^              ~
insn-attrtab.c:2219:23: clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
note: use '=' to turn this equality comparison into an assignmentclang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]

      if (((ix86_cpu) == (CPU_ATHLON)))
                      ^~
                      =
insn-attrtab.c:2438:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_ATHLON)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~
insn-attrtab.c:2438:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_ATHLON)))
          ~           ^              ~
insn-attrtab.c:2438:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_ATHLON)))
                      ^~
                      =
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o insn-output.o -DSPEC_CPU -DNDEBUG -I.   -O2                insn-output.c
insn-attrtab.c:2657:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_ATHLON)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~
insn-attrtab.c:2657:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_ATHLON)))
          ~           ^              ~
insn-attrtab.c:2657:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_ATHLON)))
                      ^~
                      =
insn-attrtab.c:2764:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_ATHLON)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~
insn-attrtab.c:2764:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_ATHLON)))
          ~           ^              ~
insn-attrtab.c:2764:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_ATHLON)))
                      ^~
                      =
insn-attrtab.c:2897:23:clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
 warningclang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_ATHLON)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~
insn-attrtab.c:2897:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_ATHLON)))
          ~           ^              ~
insn-attrtab.c:2897:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_ATHLON)))
                      ^~
                      =
insn-attrtab.c:3397:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_ATHLON)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~
insn-attrtab.c:3397:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_ATHLON)))
          ~           ^              ~
insn-attrtab.c:3397:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_ATHLON)))
                      ^~
                      =
insn-attrtab.c:3878:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_ATHLON)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~
insn-attrtab.c:3878:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_ATHLON)))
          ~           ^              ~
insn-attrtab.c:3878:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_ATHLON)))
                      ^~
                      =
insn-attrtab.c:4124:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_K6)))
           ~~~~~~~~~~~^~~~~~~~~~~
insn-attrtab.c:4124:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_K6)))
          ~           ^          ~
insn-attrtab.c:4124:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_K6)))
                      ^~
                      =
insn-attrtab.c:4301:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_K6)))
           ~~~~~~~~~~~^~~~~~~~~~~
insn-attrtab.c:4301:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_K6)))
          ~           ^          ~
insn-attrtab.c:4301:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_K6)))
                      ^~
                      =
insn-attrtab.c:4363:3 warnings generated.
23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_K6)))
           ~~~~~~~~~~~^~~~~~~~~~~
insn-attrtab.c:4363:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_K6)))
          ~           ^          ~
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o insn-peep.o -DSPEC_CPU -DNDEBUG -I.   -O2                insn-peep.c
insn-attrtab.c:4363:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_K6)))
                      ^~
                      =
insn-attrtab.c:4809:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_K6)))
           ~~~~~~~~~~~^~~~~~~~~~~
insn-attrtab.c:4809:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_K6)))
          ~           ^          ~
insn-attrtab.c:4809:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_K6)))
                      ^~
                      =
insn-attrtab.c:5425:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_K6)))
           ~~~~~~~~~~~^~~~~~~~~~~
insn-attrtab.c:5425:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_K6)))
          ~           ^          ~
insn-attrtab.c:5425:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_K6)))
                      ^~
                      =
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
insn-attrtab.c:5859:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_K6)))
           ~~~~~~~~~~~^~~~~~~~~~~
insn-attrtab.c:5859:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_K6)))
          ~           ^          ~
insn-attrtab.c:5859:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_K6)))
                      ^~
                      =
insn-attrtab.c:5885:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_K6)))
           ~~~~~~~~~~~^~~~~~~~~~~
insn-attrtab.c:5885:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_K6)))
          ~           ^          ~
insn-attrtab.c:5885:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_K6)))
                      ^~
                      =
insn-attrtab.c:6099:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_K6)))
           ~~~~~~~~~~~^~~~~~~~~~~
insn-attrtab.c:6099:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_K6)))
          ~           ^          ~
insn-attrtab.c:6099:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_K6)))
                      ^~
                      =
insn-attrtab.c:6369:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUMPRO)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~
insn-attrtab.c:6369:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUMPRO)))
          ~           ^                  ~
insn-attrtab.c:6369:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUMPRO)))
                      ^~
                      =
insn-attrtab.c:6639:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUMPRO)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~
insn-attrtab.c:6639:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUMPRO)))
          ~           ^                  ~
insn-attrtab.c:6639:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUMPRO)))
                      ^~
                      =
insn-attrtab.c:6665:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUMPRO)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~
insn-attrtab.c:6665:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUMPRO)))
          ~           ^                  ~
insn-attrtab.c:6665:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUMPRO)))
                      ^~
                      =
insn-attrtab.c:6756:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUMPRO)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~
insn-attrtab.c:6756:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUMPRO)))
          ~           ^                  ~
insn-attrtab.c:6756:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUMPRO)))
                      ^~
                      =
insn-attrtab.c:6959:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUMPRO)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~
insn-attrtab.c:6959:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUMPRO)))
          ~           ^                  ~
insn-attrtab.c:6959:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUMPRO)))
                      ^~
                      =
insn-attrtab.c:7567:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUM)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:7567:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUM)))
          ~           ^               ~
insn-attrtab.c:7567:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUM)))
                      ^~
                      =
1 warning generated.
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o insn-recog.o -DSPEC_CPU -DNDEBUG -I.   -O2                insn-recog.c
insn-attrtab.c:8349:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUMPRO)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~
insn-attrtab.c:8349:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUMPRO)))
          ~           ^                  ~
insn-attrtab.c:8349:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUMPRO)))
                      ^~
                      =
insn-attrtab.c:8392:20: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
          if (((ix86_cpu) == (CPU_PENTIUM)))
               ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:8392:20: note: remove extraneous parentheses around the comparison to silence this warning
          if (((ix86_cpu) == (CPU_PENTIUM)))
              ~           ^               ~
insn-attrtab.c:8392:20: note: use '=' to turn this equality comparison into an assignment
          if (((ix86_cpu) == (CPU_PENTIUM)))
                          ^~
                          =
insn-attrtab.c:8635:25: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
          else if (((ix86_cpu) == (CPU_PENTIUM)))
                    ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:8635:25: note: remove extraneous parentheses around the comparison to silence this warning
          else if (((ix86_cpu) == (CPU_PENTIUM)))
                   ~           ^               ~
insn-attrtab.c:8635:25: note: use '=' to turn this equality comparison into an assignment
          else if (((ix86_cpu) == (CPU_PENTIUM)))
                               ^~
                               =
insn-attrtab.c:8657:25: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
          else if (((ix86_cpu) == (CPU_PENTIUM)))
                    ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:8657:25: note: remove extraneous parentheses around the comparison to silence this warning
          else if (((ix86_cpu) == (CPU_PENTIUM)))
                   ~           ^               ~
insn-attrtab.c:8657:25: note: use '=' to turn this equality comparison into an assignment
          else if (((ix86_cpu) == (CPU_PENTIUM)))
                               ^~
                               =
insn-attrtab.c:8703:25: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
          else if (((ix86_cpu) == (CPU_PENTIUM)))
                    ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:8703:25: note: remove extraneous parentheses around the comparison to silence this warning
          else if (((ix86_cpu) == (CPU_PENTIUM)))
                   ~           ^               ~
insn-attrtab.c:8703:25: note: use '=' to turn this equality comparison into an assignment
          else if (((ix86_cpu) == (CPU_PENTIUM)))
                               ^~
                               =
insn-attrtab.c:8734:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUMPRO)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~
insn-attrtab.c:8734:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUMPRO)))
          ~           ^                  ~
insn-attrtab.c:8734:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUMPRO)))
                      ^~
                      =
insn-attrtab.c:8781:20: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
          if (((ix86_cpu) == (CPU_PENTIUM)))
               ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:8781:20: note: remove extraneous parentheses around the comparison to silence this warning
          if (((ix86_cpu) == (CPU_PENTIUM)))
              ~           ^               ~
insn-attrtab.c:8781:20: note: use '=' to turn this equality comparison into an assignment
          if (((ix86_cpu) == (CPU_PENTIUM)))
                          ^~
                          =
insn-attrtab.c:8942:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUM)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:8942:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUM)))
          ~           ^               ~
insn-attrtab.c:8942:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUM)))
                      ^~
                      =
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o integrate.o -DSPEC_CPU -DNDEBUG -I.   -O2                integrate.c
insn-attrtab.c:9223:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUM)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:9223:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUM)))
          ~           ^               ~
insn-attrtab.c:9223:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUM)))
                      ^~
                      =
insn-attrtab.c:9269:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUM)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:9269:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUM)))
          ~           ^               ~
insn-attrtab.c:9269:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUM)))
                      ^~
                      =
insn-attrtab.c:9293:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUM)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:9293:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUM)))
          ~           ^               ~
insn-attrtab.c:9293:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUM)))
                      ^~
                      =
insn-attrtab.c:9339:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUM)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:9339:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUM)))
          ~           ^               ~
insn-attrtab.c:9339:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUM)))
                      ^~
                      =
insn-attrtab.c:9356:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUM)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:9356:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUM)))
          ~           ^               ~
insn-attrtab.c:9356:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUM)))
                      ^~
                      =
insn-attrtab.c:9380:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUM)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:9380:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUM)))
          ~           ^               ~
insn-attrtab.c:9380:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUM)))
                      ^~
                      =
insn-attrtab.c:9398:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUM)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:9398:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUM)))
          ~           ^               ~
insn-attrtab.c:9398:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUM)))
                      ^~
                      =
insn-attrtab.c:9420:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUM)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:9420:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUM)))
          ~           ^               ~
insn-attrtab.c:9420:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUM)))
                      ^~
                      =
insn-attrtab.c:9438:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUM)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:9438:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUM)))
          ~           ^               ~
insn-attrtab.c:9438:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUM)))
                      ^~
                      =
insn-attrtab.c:9458:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUM)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:9458:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUM)))
          ~           ^               ~
insn-attrtab.c:9458:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUM)))
                      ^~
                      =
insn-attrtab.c:9581:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUM)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:9581:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUM)))
          ~           ^               ~
insn-attrtab.c:9581:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUM)))
                      ^~
                      =
insn-attrtab.c:9603:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUM)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:9603:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUM)))
          ~           ^               ~
insn-attrtab.c:9603:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUM)))
                      ^~
                      =
insn-attrtab.c:9633/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o intl.o -DSPEC_CPU -DNDEBUG -I.   -O2                intl.c
:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUM)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:9633:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUM)))
          ~           ^               ~
insn-attrtab.c:9633:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUM)))
                      ^~
                      =
insn-attrtab.c:9669:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUM)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:9669:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUM)))
          ~           ^               ~
insn-attrtab.c:9669:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUM)))
                      ^~
                      =
insn-attrtab.c:9759:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUM)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:9759:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUM)))
          ~           ^               ~
insn-attrtab.c:9759:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUM)))
                      ^~
                      =
insn-attrtab.c:9785:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUM)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:9785:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUM)))
          ~           ^               ~
insn-attrtab.c:9785:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUM)))
                      ^~
                      =
insn-attrtab.c:9801:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUM)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:9801:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUM)))
          ~           ^               ~
insn-attrtab.c:9801:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUM)))
                      ^~
                      =
insn-attrtab.c:9823:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUM)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:9823:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUM)))
          ~           ^               ~
insn-attrtab.c:9823:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUM)))
                      ^~
                      =
insn-attrtab.c:9850:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUM)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:9850:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUM)))
          ~           ^               ~
insn-attrtab.c:9850:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUM)))
                      ^~
                      =
insn-attrtab.c:9872:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUM)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:9872:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUM)))
          ~           ^               ~
insn-attrtab.c:9872:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUM)))
                      ^~
                      =
insn-attrtab.c:9899:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUM)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:9899:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUM)))
          ~           ^               ~
insn-attrtab.c:9899:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUM)))
                      ^~
                      =
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
insn-attrtab.c:9924:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUM)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:9924:23: note: remove extraneous parentheses around the comparison to silence this warning
clang-12: warning:       if (((ix86_cpu) == (CPU_PENTIUM)))argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]

          ~           ^               ~
insn-attrtab.c:9924:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUM)))
                      ^~
                      =
insn-attrtab.c:9947:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUM)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:9947:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUM)))
          ~           ^               ~
insn-attrtab.c:9947:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUM)))
                      ^~
                      =
insn-attrtab.c:10034:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUM)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:10034:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUM)))
          ~           ^               ~
insn-attrtab.c:10034:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUM)))
                      ^~
                      =
insn-attrtab.c:10062:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUM)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:10062:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUM)))
          ~           ^               ~
insn-attrtab.c:10062:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUM)))
                      ^~
                      =
insn-attrtab.c:10089:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUM)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:10089:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUM)))
          ~           ^               ~
insn-attrtab.c:10089:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUM)))
                      ^~
                      =
insn-attrtab.c:10111:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUM)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:10111:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUM)))
          ~           ^               ~
insn-attrtab.c:10111:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUM)))
                      ^~
                      =
insn-attrtab.c:10132:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUM)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:10132:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUM)))
          ~           ^               ~
insn-attrtab.c:10132:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUM)))
                      ^~
                      =
insn-attrtab.c:10150:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUM)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:10150:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUM)))
          ~           ^               ~
insn-attrtab.c:10150:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUM)))
                      ^~
                      =
insn-attrtab.c:10184:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUM)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:10184:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUM)))
          ~           ^               ~
insn-attrtab.c:10184:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUM)))
                      ^~
                      =
insn-attrtab.c:10209:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUM)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:10209:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUM)))
          ~           ^               ~
insn-attrtab.c:10209:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUM)))
                      ^~
                      =
insn-attrtab.c:10232:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUM)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:10232:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUM)))
          ~           ^               ~
insn-attrtab.c:10232:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUM)))
                      ^~
                      =
insn-attrtab.c:10343:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUM)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:10343:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUM)))
          ~           ^               ~
insn-attrtab.c:10343:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUM)))
                      ^~
                      =
insn-attrtab.c:10384:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUM)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:10384:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUM)))
          ~           ^               ~
insn-attrtab.c:10384:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUM)))
                      ^~
                      =
insn-attrtab.c:10466:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUM)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:10466:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUM)))
          ~           ^               ~
insn-attrtab.c:10466:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUM)))
                      ^~
                      =
insn-attrtab.c:10480:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUM)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:10480:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUM)))
          ~           ^               ~
insn-attrtab.c:10480:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUM)))
                      ^~
                      =
insn-attrtab.c:10506:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUM)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:10506:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUM)))
          ~           ^               ~
insn-attrtab.c:10506:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUM)))
                      ^~
                      =
insn-attrtab.c:10530:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUM)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:10530:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUM)))
          ~           ^               ~
insn-attrtab.c:10530:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUM)))
                      ^~
                      =
insn-attrtab.c:10554:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUM)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:10554:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUM)))
          ~           ^               ~
insn-attrtab.c:10554:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUM)))
                      ^~
                      =
insn-attrtab.c:10572:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUM)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:10572:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUM)))
          ~           ^               ~
insn-attrtab.c:10572:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUM)))
                      ^~
                      =
insn-attrtab.c:10594:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUM)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:10594:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUM)))
          ~           ^               ~
insn-attrtab.c:10594:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUM)))
                      ^~
                      =
insn-attrtab.c:10612:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUM)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:10612:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUM)))
          ~           ^               ~
insn-attrtab.c:10612:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUM)))
                      ^~
                      =
insn-attrtab.c:10632:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUM)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:10632:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUM)))
          ~           ^               ~
insn-attrtab.c:10632:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUM)))
                      ^~
                      =
insn-attrtab.c:10654:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUM)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:10654:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUM)))
          ~           ^               ~
insn-attrtab.c:10654:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUM)))
                      ^~
                      =
insn-attrtab.c:10671:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUM)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:10671:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUM)))
          ~           ^               ~
insn-attrtab.c:10671:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUM)))
                      ^~
                      =
insn-attrtab.c:10842:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUM)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:10842:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUM)))
          ~           ^               ~
insn-attrtab.c:10842:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUM)))
                      ^~
                      =
insn-attrtab.c:10878:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUM)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:10878:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUM)))
          ~           ^               ~
insn-attrtab.c:10878:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUM)))
                      ^~
                      =
insn-attrtab.c:10899:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUM)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:10899:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUM)))
          ~           ^               ~
insn-attrtab.c:10899:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUM)))
                      ^~
                      =
insn-attrtab.c:10936:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUM)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:10936:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUM)))
          ~           ^               ~
insn-attrtab.c:10936:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUM)))
                      ^~
                      =
insn-attrtab.c:10959:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUM)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:10959:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUM)))
          ~           ^               ~
insn-attrtab.c:10959:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUM)))
                      ^~
                      =
insn-attrtab.c:11126:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUM)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:11126:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUM)))
          ~           ^               ~
insn-attrtab.c:11126:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUM)))
                      ^~
                      =
insn-attrtab.c:11186:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUM)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:11186:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUM)))
          ~           ^               ~
insn-attrtab.c:11186:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUM)))
                      ^~
                      =
insn-attrtab.c:11200:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUM)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:11200:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUM)))
          ~           ^               ~
insn-attrtab.c:11200:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUM)))
                      ^~
                      =
insn-attrtab.c:11225:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUM)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:11225:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUM)))
          ~           ^               ~
insn-attrtab.c:11225:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUM)))
                      ^~
                      =
insn-attrtab.c:11268:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUM)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:11268:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUM)))
          ~           ^               ~
insn-attrtab.c:11268:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUM)))
                      ^~
                      =
insn-attrtab.c:11353:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUM)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:11353:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUM)))
          ~           ^               ~
insn-attrtab.c:11353:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUM)))
                      ^~
                      =
insn-attrtab.c:11487:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUM)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:11487:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUM)))
          ~           ^               ~
insn-attrtab.c:11487:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUM)))
                      ^~
                      =
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o jump.o -DSPEC_CPU -DNDEBUG -I.   -O2                jump.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o langhooks.o -DSPEC_CPU -DNDEBUG -I.   -O2                langhooks.c
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o lcm.o -DSPEC_CPU -DNDEBUG -I.   -O2                lcm.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
insn-attrtab.c:31542:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUMPRO)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~
insn-attrtab.c:31542:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUMPRO)))
          ~           ^                  ~
insn-attrtab.c:31542:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUMPRO)))
                      ^~
                      =
insn-attrtab.c:31585:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUM)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:31585:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUM)))
          ~           ^               ~
insn-attrtab.c:31585:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUM)))
                      ^~
                      =
insn-attrtab.c:31958:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUM)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:31958:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUM)))
          ~           ^               ~
insn-attrtab.c:31958:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUM)))
                      ^~
                      =
insn-attrtab.c:31982:28: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      else if (((ix86_cpu) == (CPU_PENTIUMPRO)))
                ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~
insn-attrtab.c:31982:28: note: remove extraneous parentheses around the comparison to silence this warning
      else if (((ix86_cpu) == (CPU_PENTIUMPRO)))
               ~           ^                  ~
insn-attrtab.c:31982:28: note: use '=' to turn this equality comparison into an assignment
      else if (((ix86_cpu) == (CPU_PENTIUMPRO)))
                           ^~
                           =
insn-attrtab.c:32062:28: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      else if (((ix86_cpu) == (CPU_PENTIUMPRO)))
                ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~
insn-attrtab.c:32062:28: note: remove extraneous parentheses around the comparison to silence this warning
      else if (((ix86_cpu) == (CPU_PENTIUMPRO)))
               ~           ^                  ~
insn-attrtab.c:32062:28: note: use '=' to turn this equality comparison into an assignment
      else if (((ix86_cpu) == (CPU_PENTIUMPRO)))
                           ^~
                           =
insn-attrtab.c:32127:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUM)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:32127:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUM)))
          ~           ^               ~
insn-attrtab.c:32127:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUM)))
                      ^~
                      =
insn-attrtab.c:32202:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUM)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:32202:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUM)))
          ~           ^               ~
insn-attrtab.c:32202:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUM)))
                      ^~
                      =
insn-attrtab.c:32280:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUMPRO)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~
insn-attrtab.c:32280:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUMPRO)))
          ~           ^                  ~
insn-attrtab.c:32280:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUMPRO)))
                      ^~
                      =
insn-attrtab.c:32323:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUM)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:32323:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUM)))
          ~           ^               ~
insn-attrtab.c:32323:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUM)))
                      ^~
                      =
insn-attrtab.c:32696:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUM)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:32696:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUM)))
          ~           ^               ~
insn-attrtab.c:32696:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUM)))
                      ^~
                      =
insn-attrtab.c:32720:28: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      else if (((ix86_cpu) == (CPU_PENTIUMPRO)))
                ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~
insn-attrtab.c:32720:28: note: remove extraneous parentheses around the comparison to silence this warning
      else if (((ix86_cpu) == (CPU_PENTIUMPRO)))
               ~           ^                  ~
insn-attrtab.c:32720:28: note: use '=' to turn this equality comparison into an assignment
      else if (((ix86_cpu) == (CPU_PENTIUMPRO)))
                           ^~
                           =
insn-attrtab.c:32800:28: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      else if (((ix86_cpu) == (CPU_PENTIUMPRO)))
                ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~
insn-attrtab.c:32800:28: note: remove extraneous parentheses around the comparison to silence this warning
      else if (((ix86_cpu) == (CPU_PENTIUMPRO)))
               ~           ^                  ~
insn-attrtab.c:32800:28: note: use '=' to turn this equality comparison into an assignment
      else if (((ix86_cpu) == (CPU_PENTIUMPRO)))
                           ^~
                           =
insn-attrtab.c:32865:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUM)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:32865:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUM)))
          ~           ^               ~
insn-attrtab.c:32865:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUM)))
                      ^~
                      =
insn-attrtab.c:32940:23: warning: equality comparison with extraneous parentheses [-Wparentheses-equality]
      if (((ix86_cpu) == (CPU_PENTIUM)))
           ~~~~~~~~~~~^~~~~~~~~~~~~~~~
insn-attrtab.c:32940:23: note: remove extraneous parentheses around the comparison to silence this warning
      if (((ix86_cpu) == (CPU_PENTIUM)))
          ~           ^               ~
insn-attrtab.c:32940:23: note: use '=' to turn this equality comparison into an assignment
      if (((ix86_cpu) == (CPU_PENTIUM)))
                      ^~
                      =
jump.c:434:41: warning: implicit conversion from enumeration type 'enum reg_note' to different enumeration type 'enum machine_mode' [-Wenum-conversion]
                    = copy_insn_1 (gen_rtx_EXPR_LIST (REG_NOTE_KIND (link),
                                   ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~
./rtl.h:601:30: note: expanded from macro 'REG_NOTE_KIND'
#define REG_NOTE_KIND(LINK) ((enum reg_note) GET_MODE (LINK))
                             ^
./genrtl.h:122:31: note: expanded from macro 'gen_rtx_EXPR_LIST'
  gen_rtx_fmt_ee (EXPR_LIST, (MODE), (ARG0), (ARG1))
  ~~~~~~~~~~~~~~              ^~~~
jump.c:439:41: warning: implicit conversion from enumeration type 'enum reg_note' to different enumeration type 'enum machine_mode' [-Wenum-conversion]
                    = copy_insn_1 (gen_rtx_INSN_LIST (REG_NOTE_KIND (link),
                                   ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~
./rtl.h:601:30: note: expanded from macro 'REG_NOTE_KIND'
#define REG_NOTE_KIND(LINK) ((enum reg_note) GET_MODE (LINK))
                             ^
./genrtl.h:124:31: note: expanded from macro 'gen_rtx_INSN_LIST'
  gen_rtx_fmt_ue (INSN_LIST, (MODE), (ARG0), (ARG1))
  ~~~~~~~~~~~~~~              ^~~~
jump.c:1472:43: warning: implicit conversion from enumeration type 'enum reg_note' to different enumeration type 'enum machine_mode' [-Wenum-conversion]
                  REG_NOTES (insn) = gen_rtx_INSN_LIST (REG_LABEL, label,
                                     ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~
./genrtl.h:124:31: note: expanded from macro 'gen_rtx_INSN_LIST'
  gen_rtx_fmt_ue (INSN_LIST, (MODE), (ARG0), (ARG1))
  ~~~~~~~~~~~~~~              ^~~~
jump.c:1626:28: warning: implicit conversion from enumeration type 'enum reg_note' to different enumeration type 'enum machine_mode' [-Wenum-conversion]
                    = gen_rtx_EXPR_LIST (REG_UNUSED, reg,
                      ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~
./genrtl.h:122:31: note: expanded from macro 'gen_rtx_EXPR_LIST'
  gen_rtx_fmt_ee (EXPR_LIST, (MODE), (ARG0), (ARG1))
  ~~~~~~~~~~~~~~              ^~~~
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o lists.o -DSPEC_CPU -DNDEBUG -I.   -O2                lists.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o local-alloc.o -DSPEC_CPU -DNDEBUG -I.   -O2                local-alloc.c
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o loop.o -DSPEC_CPU -DNDEBUG -I.   -O2                loop.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o obstack.o -DSPEC_CPU -DNDEBUG -I.   -O2                obstack.c
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o optabs.o -DSPEC_CPU -DNDEBUG -I.   -O2                optabs.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
4 warnings generated.
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o params.o -DSPEC_CPU -DNDEBUG -I.   -O2                params.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
local-alloc.c:908:26: warning: implicit conversion from enumeration type 'enum reg_note' to different enumeration type 'enum machine_mode' [-Wenum-conversion]
                  = gen_rtx_EXPR_LIST (REG_EQUIV, dest, REG_NOTES (init_insn));
                    ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./genrtl.h:122:31: note: expanded from macro 'gen_rtx_EXPR_LIST'
  gen_rtx_fmt_ee (EXPR_LIST, (MODE), (ARG0), (ARG1))
  ~~~~~~~~~~~~~~              ^~~~
local-alloc.c:987:51: warning: implicit conversion from enumeration type 'enum reg_note' to different enumeration type 'enum machine_mode' [-Wenum-conversion]
            REG_NOTES (insn) = note = gen_rtx_EXPR_LIST (REG_EQUIV, SET_SRC (set),
                                      ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~
./genrtl.h:122:31: note: expanded from macro 'gen_rtx_EXPR_LIST'
  gen_rtx_fmt_ee (EXPR_LIST, (MODE), (ARG0), (ARG1))
  ~~~~~~~~~~~~~~              ^~~~
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o predict.o -DSPEC_CPU -DNDEBUG -I.   -O2                predict.c
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o print-rtl.o -DSPEC_CPU -DNDEBUG -I.   -O2                print-rtl.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
optabs.c:2797:40: warning: implicit conversion from enumeration type 'enum reg_note' to different enumeration type 'enum machine_mode' [-Wenum-conversion]
        REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_NO_CONFLICT, op1,
                           ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~
./genrtl.h:122:31: note: expanded from macro 'gen_rtx_EXPR_LIST'
  gen_rtx_fmt_ee (EXPR_LIST, (MODE), (ARG0), (ARG1))
  ~~~~~~~~~~~~~~              ^~~~
optabs.c:2801:40: warning: implicit conversion from enumeration type 'enum reg_note' to different enumeration type 'enum machine_mode' [-Wenum-conversion]
        REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_NO_CONFLICT, op0,
                           ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~
./genrtl.h:122:31: note: expanded from macro 'gen_rtx_EXPR_LIST'
  gen_rtx_fmt_ee (EXPR_LIST, (MODE), (ARG0), (ARG1))
  ~~~~~~~~~~~~~~              ^~~~
optabs.c:2830:42: warning: implicit conversion from enumeration type 'enum reg_note' to different enumeration type 'enum machine_mode' [-Wenum-conversion]
  REG_NOTES (first) = gen_rtx_INSN_LIST (REG_LIBCALL, last,
                      ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~
./genrtl.h:124:31: note: expanded from macro 'gen_rtx_INSN_LIST'
  gen_rtx_fmt_ue (INSN_LIST, (MODE), (ARG0), (ARG1))
  ~~~~~~~~~~~~~~              ^~~~
optabs.c:2832:41: warning: implicit conversion from enumeration type 'enum reg_note' to different enumeration type 'enum machine_mode' [-Wenum-conversion]
  REG_NOTES (last) = gen_rtx_INSN_LIST (REG_RETVAL, first, REG_NOTES (last));
                     ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./genrtl.h:124:31: note: expanded from macro 'gen_rtx_INSN_LIST'
  gen_rtx_fmt_ue (INSN_LIST, (MODE), (ARG0), (ARG1))
  ~~~~~~~~~~~~~~              ^~~~
optabs.c:2903:44: warning: implicit conversion from enumeration type 'enum reg_note' to different enumeration type 'enum machine_mode' [-Wenum-conversion]
            REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_EH_REGION, GEN_INT (-1),
                               ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./genrtl.h:122:31: note: expanded from macro 'gen_rtx_EXPR_LIST'
  gen_rtx_fmt_ee (EXPR_LIST, (MODE), (ARG0), (ARG1))
  ~~~~~~~~~~~~~~              ^~~~
optabs.c:2984:46: warning: implicit conversion from enumeration type 'enum reg_note' to different enumeration type 'enum machine_mode' [-Wenum-conversion]
      REG_NOTES (first) = gen_rtx_INSN_LIST (REG_LIBCALL, last,
                          ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~
./genrtl.h:124:31: note: expanded from macro 'gen_rtx_INSN_LIST'
  gen_rtx_fmt_ue (INSN_LIST, (MODE), (ARG0), (ARG1))
  ~~~~~~~~~~~~~~              ^~~~
optabs.c:2986:45: warning: implicit conversion from enumeration type 'enum reg_note' to different enumeration type 'enum machine_mode' [-Wenum-conversion]
      REG_NOTES (last) = gen_rtx_INSN_LIST (REG_RETVAL, first,
                         ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~
./genrtl.h:124:31: note: expanded from macro 'gen_rtx_INSN_LIST'
  gen_rtx_fmt_ue (INSN_LIST, (MODE), (ARG0), (ARG1))
  ~~~~~~~~~~~~~~              ^~~~
predict.c:104:26: warning: implicit conversion from enumeration type 'enum reg_note' to different enumeration type 'enum machine_mode' [-Wenum-conversion]
    = gen_rtx_EXPR_LIST (REG_BR_PRED,
      ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~
./genrtl.h:122:31: note: expanded from macro 'gen_rtx_EXPR_LIST'
  gen_rtx_fmt_ee (EXPR_LIST, (MODE), (ARG0), (ARG1))
  ~~~~~~~~~~~~~~              ^~~~
predict.c:301:23: warning: implicit conversion from enumeration type 'enum reg_note' to different enumeration type 'enum machine_mode' [-Wenum-conversion]
        = gen_rtx_EXPR_LIST (REG_BR_PROB,
          ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~
./genrtl.h:122:31: note: expanded from macro 'gen_rtx_EXPR_LIST'
  gen_rtx_fmt_ee (EXPR_LIST, (MODE), (ARG0), (ARG1))
  ~~~~~~~~~~~~~~              ^~~~
loop.c:1748:44: warning: implicit conversion from enumeration type 'enum reg_note' to different enumeration type 'enum machine_mode' [-Wenum-conversion]
            REG_NOTES (insn) = gen_rtx_INSN_LIST (REG_LABEL, XEXP (x, 0),
                               ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~
./genrtl.h:124:31: note: expanded from macro 'gen_rtx_INSN_LIST'
predict.c:905:8: warning: logical not is only applied to the left hand side of this bitwise operator [-Wlogical-not-parentheses]
          if (!fallthru->flags & EDGE_FALLTHRU)
              ^                ~
predict.c:905:8: note: add parentheses after the '!' to evaluate the bitwise operator first
          if (!fallthru->flags & EDGE_FALLTHRU)
              ^
               (                              )
predict.c:905:8: note: add parentheses around left hand side expression to silence this warning
          if (!fallthru->flags & EDGE_FALLTHRU)
              ^
              (               )
  gen_rtx_fmt_ue (INSN_LIST, (MODE), (ARG0), (ARG1))
  ~~~~~~~~~~~~~~              ^~~~
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o print-tree.o -DSPEC_CPU -DNDEBUG -I.   -O2                print-tree.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
loop.c:7976:29: warning: implicit conversion from enumeration type 'enum reg_note' to different enumeration type 'enum machine_mode' [-Wenum-conversion]
              = gen_rtx_EXPR_LIST (REG_NONNEG, bl->biv->dest_reg,
                ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./genrtl.h:122:31: note: expanded from macro 'gen_rtx_EXPR_LIST'
  gen_rtx_fmt_ee (EXPR_LIST, (MODE), (ARG0), (ARG1))
  ~~~~~~~~~~~~~~              ^~~~
loop.c:8002:26: warning: implicit conversion from enumeration type 'enum reg_note' to different enumeration type 'enum machine_mode' [-Wenum-conversion]
                  = gen_rtx_EXPR_LIST (REG_NONNEG, bl->biv->dest_reg,
                    ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./genrtl.h:122:31: note: expanded from macro 'gen_rtx_EXPR_LIST'
  gen_rtx_fmt_ee (EXPR_LIST, (MODE), (ARG0), (ARG1))
  ~~~~~~~~~~~~~~              ^~~~
loop.c:8399:46: warning: implicit conversion from enumeration type 'enum reg_note' to different enumeration type 'enum machine_mode' [-Wenum-conversion]
                      REG_NOTES (tem) = gen_rtx_EXPR_LIST (REG_NONNEG, reg,
                                        ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~
./genrtl.h:122:31: note: expanded from macro 'gen_rtx_EXPR_LIST'
  gen_rtx_fmt_ee (EXPR_LIST, (MODE), (ARG0), (ARG1))
  ~~~~~~~~~~~~~~              ^~~~
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o profile.o -DSPEC_CPU -DNDEBUG -I.   -O2                profile.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
3 warnings generated.
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o real.o -DSPEC_CPU -DNDEBUG -I.   -O2                real.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
2 warnings generated.
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o recog.o -DSPEC_CPU -DNDEBUG -I.   -O2                recog.c
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o reg-stack.o -DSPEC_CPU -DNDEBUG -I.   -O2                reg-stack.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
profile.c:462:26: warning: implicit conversion from enumeration type 'enum reg_note' to different enumeration type 'enum machine_mode' [-Wenum-conversion]
                  = gen_rtx_EXPR_LIST (REG_BR_PROB, GEN_INT (prob),
                    ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~
./genrtl.h:122:31: note: expanded from macro 'gen_rtx_EXPR_LIST'
  gen_rtx_fmt_ee (EXPR_LIST, (MODE), (ARG0), (ARG1))
  ~~~~~~~~~~~~~~              ^~~~
profile.c:494:22: warning: expression result unused [-Wunused-value]
            num_branches++, num_never_executed;
                            ^~~~~~~~~~~~~~~~~~
reg-stack.c:957:26: warning: implicit conversion from enumeration type 'enum reg_note' to different enumeration type 'enum machine_mode' [-Wenum-conversion]
    = gen_rtx_EXPR_LIST (REG_DEAD, FP_MODE_REG (FIRST_STACK_REG, DFmode),
      ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./genrtl.h:122:31: note: expanded from macro 'gen_rtx_EXPR_LIST'
  gen_rtx_fmt_ee (EXPR_LIST, (MODE), (ARG0), (ARG1))
  ~~~~~~~~~~~~~~              ^~~~
reg-stack.c:1175:42: warning: implicit conversion from enumeration type 'enum reg_note' to different enumeration type 'enum machine_mode' [-Wenum-conversion]
          REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_DEAD, top_stack_reg,
                             ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~
./genrtl.h:122:31: note: expanded from macro 'gen_rtx_EXPR_LIST'
  gen_rtx_fmt_ee (EXPR_LIST, (MODE), (ARG0), (ARG1))
  ~~~~~~~~~~~~~~              ^~~~
recog.c:3144:31: warning: implicit conversion from enumeration type 'enum reg_note' to different enumeration type 'enum machine_mode' [-Wenum-conversion]
                              = gen_rtx_EXPR_LIST (REG_NOTE_KIND (note),
                                ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~
./rtl.h:601:30: note: expanded from macro 'REG_NOTE_KIND'
#define REG_NOTE_KIND(LINK) ((enum reg_note) GET_MODE (LINK))
                             ^
./genrtl.h:122:31: note: expanded from macro 'gen_rtx_EXPR_LIST'
  gen_rtx_fmt_ee (EXPR_LIST, (MODE), (ARG0), (ARG1))
  ~~~~~~~~~~~~~~              ^~~~
recog.c:3194:31: warning: implicit conversion from enumeration type 'enum reg_note' to different enumeration type 'enum machine_mode' [-Wenum-conversion]
                              = gen_rtx_EXPR_LIST (REG_EH_REGION,
                                ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~
./genrtl.h:122:31: note: expanded from macro 'gen_rtx_EXPR_LIST'
  gen_rtx_fmt_ee (EXPR_LIST, (MODE), (ARG0), (ARG1))
  ~~~~~~~~~~~~~~              ^~~~
2 warnings generated.
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o regclass.o -DSPEC_CPU -DNDEBUG -I.   -O2                regclass.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
7 warnings generated.
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o regmove.o -DSPEC_CPU -DNDEBUG -I.   -O2                regmove.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
regmove.c:148:28: warning: implicit conversion from enumeration type 'enum reg_note' to different enumeration type 'enum machine_mode' [-Wenum-conversion]
                    = gen_rtx_EXPR_LIST (REG_INC,
                      ~~~~~~~~~~~~~~~~~~~^~~~~~~~
./genrtl.h:122:31: note: expanded from macro 'gen_rtx_EXPR_LIST'
  gen_rtx_fmt_ee (EXPR_LIST, (MODE), (ARG0), (ARG1))
  ~~~~~~~~~~~~~~              ^~~~
2 warnings generated.
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o regrename.o -DSPEC_CPU -DNDEBUG -I.   -O2                regrename.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
2 warnings generated.
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o reload.o -DSPEC_CPU -DNDEBUG -I.   -O2                reload.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o reload1.o -DSPEC_CPU -DNDEBUG -I.   -O2                reload1.c
clang-12regrename.c:136:30: warning: comparison of different enumeration types ('enum reg_note' and 'enum machine_mode') [-Wenum-compare]
    if (REG_NOTE_KIND (note) == kind && REG_P (XEXP (note, 0)))
        ~~~~~~~~~~~~~~~~~~~~ ^  ~~~~
: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
reload.c:3928:44: warning: implicit conversion from enumeration type 'enum reg_note' to different enumeration type 'enum machine_mode' [-Wenum-conversion]
            REG_NOTES (insn) = gen_rtx_INSN_LIST (REG_LABEL,
                               ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~
./genrtl.h:124:31: note: expanded from macro 'gen_rtx_INSN_LIST'
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o reorg.o -DSPEC_CPU -DNDEBUG -I.   -O2                reorg.c
  gen_rtx_fmt_ue (INSN_LIST, (MODE), (ARG0), (ARG1))
  ~~~~~~~~~~~~~~              ^~~~
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
reload1.c:2501:31: warning: implicit conversion from enumeration type 'enum reg_note' to different enumeration type 'enum machine_mode' [-Wenum-conversion]
              x = gen_rtx_EXPR_LIST (REG_NOTE_KIND (x), new, XEXP (x, 1));
                  ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./rtl.h:601:30: note: expanded from macro 'REG_NOTE_KIND'
#define REG_NOTE_KIND(LINK) ((enum reg_note) GET_MODE (LINK))
                             ^
./genrtl.h:122:31: note: expanded from macro 'gen_rtx_EXPR_LIST'
  gen_rtx_fmt_ee (EXPR_LIST, (MODE), (ARG0), (ARG1))
  ~~~~~~~~~~~~~~              ^~~~
reload.c:5880:44: warning: implicit conversion from enumeration type 'enum reg_note' to different enumeration type 'enum machine_mode' [-Wenum-conversion]
            REG_NOTES (insn) = gen_rtx_INSN_LIST (REG_LABEL,
                               ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~
./genrtl.h:124:31: note: expanded from macro 'gen_rtx_INSN_LIST'
  gen_rtx_fmt_ue (INSN_LIST, (MODE), (ARG0), (ARG1))
  ~~~~~~~~~~~~~~              ^~~~
1 warning generated.
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o resource.o -DSPEC_CPU -DNDEBUG -I.   -O2                resource.c
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o rtl.o -DSPEC_CPU -DNDEBUG -I.   -O2                rtl.c
reload1.c:7507:24: warning: implicit conversion from enumeration type 'enum reg_note' to different enumeration type 'enum machine_mode' [-Wenum-conversion]
                = gen_rtx_EXPR_LIST (REG_EQUIV, in, REG_NOTES (insn));
                  ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./genrtl.h:122:31: noteclang-12: : expanded from macro 'gen_rtx_EXPR_LIST'
  gen_rtx_fmt_ee (EXPR_LIST, (MODE), (ARG0), (ARG1))
  ~~~~~~~~~~~~~~              ^~~~
reload1.c:7516:45: warning: implicit conversion from enumeration type 'enum reg_note' to different enumeration type 'enum machine_mode' [-Wenum-conversion]
      REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_EQUIV, in, REG_NOTES (insn));
                         ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./genrtl.h:122:31: note: expanded from macro 'gen_rtx_EXPR_LIST'
  gen_rtx_fmt_ee (EXPR_LIST, (MODE), (ARG0), (ARG1))
  ~~~~~~~~~~~~~~              ^~~~
warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
reload1.c:9480:29: warning: implicit conversion from enumeration type 'enum reg_note' to different enumeration type 'enum machine_mode' [-Wenum-conversion]
              = gen_rtx_EXPR_LIST (REG_EH_REGION, XEXP (eh_note, 0),
                ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./genrtl.h:122:31: note: expanded from macro 'gen_rtx_EXPR_LIST'
  gen_rtx_fmt_ee (EXPR_LIST, (MODE), (ARG0), (ARG1))
  ~~~~~~~~~~~~~~              ^~~~
In file included from rtl.c:188:
./machmode.def:80:1: warning: shift count >= width of type [-Wshift-count-overflow]
DEF_MACHMODE (DImode, "DI", MODE_INT, BITS_PER_UNIT*8, 8, 8, TImode, VOIDmode)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
rtl.c:183:101: note: expanded from macro 'DEF_MACHMODE'
  ((BITSIZE) >= HOST_BITS_PER_WIDE_INT) ? ~(unsigned HOST_WIDE_INT) 0 : ((unsigned HOST_WIDE_INT) 1 << (BITSIZE)) - 1,
                                                                                                    ^  ~~~~~~~~~
In file included from rtl.c:188:
./machmode.def:81:1: warning: shift count >= width of type [-Wshift-count-overflow]
DEF_MACHMODE (TImode, "TI", MODE_INT, BITS_PER_UNIT*16, 16, 16, OImode, VOIDmode)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
rtl.c:183:101: note: expanded from macro 'DEF_MACHMODE'
  ((BITSIZE) >= HOST_BITS_PER_WIDE_INT) ? ~(unsigned HOST_WIDE_INT) 0 : ((unsigned HOST_WIDE_INT) 1 << (BITSIZE)) - 1,
                                                                                                    ^  ~~~~~~~~~
In file included from rtl.c:188:
./machmode.def:82:1: warning: shift count >= width of type [-Wshift-count-overflow]
DEF_MACHMODE (OImode, "OI", MODE_INT, BITS_PER_UNIT*32, 32, 32, VOIDmode, VOIDmode)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
rtl.c:183:101: note: expanded from macro 'DEF_MACHMODE'
  ((BITSIZE) >= HOST_BITS_PER_WIDE_INT) ? ~(unsigned HOST_WIDE_INT) 0 : ((unsigned HOST_WIDE_INT) 1 << (BITSIZE)) - 1,
                                                                                                    ^  ~~~~~~~~~
In file included from rtl.c:188:
./machmode.def:90:1: warning: shift count >= width of type [-Wshift-count-overflow]
DEF_MACHMODE (PDImode, "PDI", MODE_PARTIAL_INT, BITS_PER_UNIT*8, 8, 8, VOIDmode, VOIDmode)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
rtl.c:183:101: note: expanded from macro 'DEF_MACHMODE'
  ((BITSIZE) >= HOST_BITS_PER_WIDE_INT) ? ~(unsigned HOST_WIDE_INT) 0 : ((unsigned HOST_WIDE_INT) 1 << (BITSIZE)) - 1,
                                                                                                    ^  ~~~~~~~~~
In file included from rtl.c:188:
./machmode.def:96:1: warning: shift count >= width of type [-Wshift-count-overflow]
DEF_MACHMODE (DFmode, "DF", MODE_FLOAT, BITS_PER_UNIT*8, 8, 8, XFmode, VOIDmode)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
rtl.c:183:101: note: expanded from macro 'DEF_MACHMODE'
  ((BITSIZE) >= HOST_BITS_PER_WIDE_INT) ? ~(unsigned HOST_WIDE_INT) 0 : ((unsigned HOST_WIDE_INT) 1 << (BITSIZE)) - 1,
                                                                                                    ^  ~~~~~~~~~
In file included from rtl.c:188:
./machmode.def:97:1: warning: shift count >= width of type [-Wshift-count-overflow]
DEF_MACHMODE (XFmode, "XF", MODE_FLOAT, BITS_PER_UNIT*12, 12, 12, TFmode, VOIDmode) /* IEEE extended */
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
rtl.c:183:101: note: expanded from macro 'DEF_MACHMODE'
  ((BITSIZE) >= HOST_BITS_PER_WIDE_INT) ? ~(unsigned HOST_WIDE_INT) 0 : ((unsigned HOST_WIDE_INT) 1 << (BITSIZE)) - 1,
                                                                                                    ^  ~~~~~~~~~
In file included from rtl.c:188:
./machmode.def:98:1: warning: shift count >= width of type [-Wshift-count-overflow]
DEF_MACHMODE (TFmode, "TF", MODE_FLOAT, BITS_PER_UNIT*16, 16, 16, VOIDmode, VOIDmode)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
rtl.c:183:101: note: expanded from macro 'DEF_MACHMODE'
  ((BITSIZE) >= HOST_BITS_PER_WIDE_INT) ? ~(unsigned HOST_WIDE_INT) 0 : ((unsigned HOST_WIDE_INT) 1 << (BITSIZE)) - 1,
                                                                                                    ^  ~~~~~~~~~
In file included from rtl.c:188:
./machmode.def:103:1: warning: shift count >= width of type [-Wshift-count-overflow]
DEF_MACHMODE (SCmode, "SC", MODE_COMPLEX_FLOAT, BITS_PER_UNIT*8, 8, 4, DCmode, SFmode)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
rtl.c:183:101: note: expanded from macro 'DEF_MACHMODE'
  ((BITSIZE) >= HOST_BITS_PER_WIDE_INT) ? ~(unsigned HOST_WIDE_INT) 0 : ((unsigned HOST_WIDE_INT) 1 << (BITSIZE)) - 1,
                                                                                                    ^  ~~~~~~~~~
In file included from rtl.c:188:
./machmode.def:104:1: warning: shift count >= width of type [-Wshift-count-overflow]
DEF_MACHMODE (DCmode, "DC", MODE_COMPLEX_FLOAT, BITS_PER_UNIT*16, 16, 8, XCmode, DFmode)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
rtl.c:183:101: note: expanded from macro 'DEF_MACHMODE'
  ((BITSIZE) >= HOST_BITS_PER_WIDE_INT) ? ~(unsigned HOST_WIDE_INT) 0 : ((unsigned HOST_WIDE_INT) 1 << (BITSIZE)) - 1,
                                                                                                    ^  ~~~~~~~~~
In file included from rtl.c:188:
./machmode.def:105:1: warning: shift count >= width of type [-Wshift-count-overflow]
DEF_MACHMODE (XCmode, "XC", MODE_COMPLEX_FLOAT, BITS_PER_UNIT*24, 24, 12, TCmode, XFmode)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
rtl.c:183:101: note: expanded from macro 'DEF_MACHMODE'
  ((BITSIZE) >= HOST_BITS_PER_WIDE_INT) ? ~(unsigned HOST_WIDE_INT) 0 : ((unsigned HOST_WIDE_INT) 1 << (BITSIZE)) - 1,
                                                                                                    ^  ~~~~~~~~~
In file included from rtl.c:188:
./machmode.def:106:1: warning: shift count >= width of type [-Wshift-count-overflow]
DEF_MACHMODE (TCmode, "TC", MODE_COMPLEX_FLOAT, BITS_PER_UNIT*32, 32, 16, VOIDmode, TFmode)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
rtl.c:183:101: note: expanded from macro 'DEF_MACHMODE'
  ((BITSIZE) >= HOST_BITS_PER_WIDE_INT) ? ~(unsigned HOST_WIDE_INT) 0 : ((unsigned HOST_WIDE_INT) 1 << (BITSIZE)) - 1,
                                                                                                    ^  ~~~~~~~~~
In file included from rtl.c:188:
./machmode.def:110:1: warning: shift count >= width of type [-Wshift-count-overflow]
DEF_MACHMODE (CSImode, "CSI", MODE_COMPLEX_INT, BITS_PER_UNIT*8, 8, 4, CDImode, SImode)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
rtl.c:183:101: note: expanded from macro 'DEF_MACHMODE'
  ((BITSIZE) >= HOST_BITS_PER_WIDE_INT) ? ~(unsigned HOST_WIDE_INT) 0 : ((unsigned HOST_WIDE_INT) 1 << (BITSIZE)) - 1,
                                                                                                    ^  ~~~~~~~~~
In file included from rtl.c:188:
./machmode.def:111:1: warning: shift count >= width of type [-Wshift-count-overflow]
DEF_MACHMODE (CDImode, "CDI", MODE_COMPLEX_INT, BITS_PER_UNIT*16, 16, 8, CTImode, DImode)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
rtl.c:183:101: note: expanded from macro 'DEF_MACHMODE'
  ((BITSIZE) >= HOST_BITS_PER_WIDE_INT) ? ~(unsigned HOST_WIDE_INT) 0 : ((unsigned HOST_WIDE_INT) 1 << (BITSIZE)) - 1,
                                                                                                    ^  ~~~~~~~~~
In file included from rtl.c:188:
./machmode.def:112:1: warning: shift count >= width of type [-Wshift-count-overflow]
DEF_MACHMODE (CTImode, "CTI", MODE_COMPLEX_INT, BITS_PER_UNIT*32, 32, 16, COImode, TImode)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
rtl.c:183:101: note: expanded from macro 'DEF_MACHMODE'
  ((BITSIZE) >= HOST_BITS_PER_WIDE_INT) ? ~(unsigned HOST_WIDE_INT) 0 : ((unsigned HOST_WIDE_INT) 1 << (BITSIZE)) - 1,
                                                                                                    ^  ~~~~~~~~~
In file included from rtl.c:188:
./machmode.def:113:1: warning: shift count >= width of type [-Wshift-count-overflow]
DEF_MACHMODE (COImode, "COI", MODE_COMPLEX_INT, BITS_PER_UNIT*64, 64, 32, VOIDmode, OImode)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
rtl.c:183:101: note: expanded from macro 'DEF_MACHMODE'
  ((BITSIZE) >= HOST_BITS_PER_WIDE_INT) ? ~(unsigned HOST_WIDE_INT) 0 : ((unsigned HOST_WIDE_INT) 1 << (BITSIZE)) - 1,
                                                                                                    ^  ~~~~~~~~~
In file included from rtl.c:188:
./machmode.def:123:1: warning: shift count >= width of type [-Wshift-count-overflow]
DEF_MACHMODE (V2SImode, "V2SI", MODE_VECTOR_INT, BITS_PER_UNIT*8, 8, 4, V16QImode, SImode)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
rtl.c:183:101: note: expanded from macro 'DEF_MACHMODE'
  ((BITSIZE) >= HOST_BITS_PER_WIDE_INT) ? ~(unsigned HOST_WIDE_INT) 0 : ((unsigned HOST_WIDE_INT) 1 << (BITSIZE)) - 1,
                                                                                                    ^  ~~~~~~~~~
In file included from rtl.c:188:
./machmode.def:124:1: warning: shift count >= width of type [-Wshift-count-overflow]
DEF_MACHMODE (V2DImode, "V2DI", MODE_VECTOR_INT, BITS_PER_UNIT*16, 16, 8, V8SImode, DImode)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
rtl.c:183:101: note: expanded from macro 'DEF_MACHMODE'
  ((BITSIZE) >= HOST_BITS_PER_WIDE_INT) ? ~(unsigned HOST_WIDE_INT) 0 : ((unsigned HOST_WIDE_INT) 1 << (BITSIZE)) - 1,
                                                                                                    ^  ~~~~~~~~~
In file included from rtl.c:188:
./machmode.def:127:1: warning: shift count >= width of type [-Wshift-count-overflow]
DEF_MACHMODE (V4HImode, "V4HI", MODE_VECTOR_INT, BITS_PER_UNIT*8, 8, 2, V2SImode, HImode)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
rtl.c:183:101: note: expanded from macro 'DEF_MACHMODE'
  ((BITSIZE) >= HOST_BITS_PER_WIDE_INT) ? ~(unsigned HOST_WIDE_INT) 0 : ((unsigned HOST_WIDE_INT) 1 << (BITSIZE)) - 1,
                                                                                                    ^  ~~~~~~~~~
In file included from rtl.c:188:
./machmode.def:128:1: warning: shift count >= width of type [-Wshift-count-overflow]
DEF_MACHMODE (V4SImode, "V4SI", MODE_VECTOR_INT, BITS_PER_UNIT*16, 16, 4, V2DImode, SImode)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
rtl.c:183:101: note: expanded from macro 'DEF_MACHMODE'
  ((BITSIZE) >= HOST_BITS_PER_WIDE_INT) ? ~(unsigned HOST_WIDE_INT) 0 : ((unsigned HOST_WIDE_INT) 1 << (BITSIZE)) - 1,
                                                                                                    ^  ~~~~~~~~~
In file included from rtl.c:188:
./machmode.def:129:1: warning: shift count >= width of type [-Wshift-count-overflow]
DEF_MACHMODE (V4DImode, "V4DI", MODE_VECTOR_INT, BITS_PER_UNIT*32, 32, 8, V8DImode, DImode)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
rtl.c:183:101: note: expanded from macro 'DEF_MACHMODE'
  ((BITSIZE) >= HOST_BITS_PER_WIDE_INT) ? ~(unsigned HOST_WIDE_INT) 0 : ((unsigned HOST_WIDE_INT) 1 << (BITSIZE)) - 1,
                                                                                                    ^  ~~~~~~~~~
In file included from rtl.c:188:
./machmode.def:131:1: warning: shift count >= width of type [-Wshift-count-overflow]
DEF_MACHMODE (V8QImode, "V8QI", MODE_VECTOR_INT, BITS_PER_UNIT*8, 8, 1, V4HImode, QImode)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
rtl.c:183:101: note: expanded from macro 'DEF_MACHMODE'
  ((BITSIZE) >= HOST_BITS_PER_WIDE_INT) ? ~(unsigned HOST_WIDE_INT) 0 : ((unsigned HOST_WIDE_INT) 1 << (BITSIZE)) - 1,
                                                                                                    ^  ~~~~~~~~~
In file included from rtl.c:188:
./machmode.def:132:1: warning: shift count >= width of type [-Wshift-count-overflow]
DEF_MACHMODE (V8HImode, "V8HI", MODE_VECTOR_INT, BITS_PER_UNIT*16, 16, 2, V4SImode, HImode)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
rtl.c:183:101: note: expanded from macro 'DEF_MACHMODE'
  ((BITSIZE) >= HOST_BITS_PER_WIDE_INT) ? ~(unsigned HOST_WIDE_INT) 0 : ((unsigned HOST_WIDE_INT) 1 << (BITSIZE)) - 1,
                                                                                                    ^  ~~~~~~~~~
In file included from rtl.c:188:
./machmode.def:133:1: warning: shift count >= width of type [-Wshift-count-overflow]
DEF_MACHMODE (V8SImode, "V8SI", MODE_VECTOR_INT, BITS_PER_UNIT*32, 32, 4, V4DImode, SImode)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
rtl.c:183:101: note: expanded from macro 'DEF_MACHMODE'
  ((BITSIZE) >= HOST_BITS_PER_WIDE_INT) ? ~(unsigned HOST_WIDE_INT) 0 : ((unsigned HOST_WIDE_INT) 1 << (BITSIZE)) - 1,
                                                                                                    ^  ~~~~~~~~~
In file included from rtl.c:188:
./machmode.def:134:1: warning: shift count >= width of type [-Wshift-count-overflow]
DEF_MACHMODE (V8DImode, "V8DI", MODE_VECTOR_INT, BITS_PER_UNIT*64, 64, 8, VOIDmode, DImode)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
rtl.c:183:101: note: expanded from macro 'DEF_MACHMODE'
  ((BITSIZE) >= HOST_BITS_PER_WIDE_INT) ? ~(unsigned HOST_WIDE_INT) 0 : ((unsigned HOST_WIDE_INT) 1 << (BITSIZE)) - 1,
                                                                                                    ^  ~~~~~~~~~
In file included from rtl.c:188:
./machmode.def:136:1: warning: shift count >= width of type [-Wshift-count-overflow]
DEF_MACHMODE (V16QImode, "V16QI", MODE_VECTOR_INT, BITS_PER_UNIT*16, 16, 1, V8HImode, QImode)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
rtl.c:183:101: note: expanded from macro 'DEF_MACHMODE'
  ((BITSIZE) >= HOST_BITS_PER_WIDE_INT) ? ~(unsigned HOST_WIDE_INT) 0 : ((unsigned HOST_WIDE_INT) 1 << (BITSIZE)) - 1,
                                                                                                    ^  ~~~~~~~~~
In file included from rtl.c:188:
./machmode.def:138:1: warning: shift count >= width of type [-Wshift-count-overflow]
DEF_MACHMODE (V2SFmode, "V2SF", MODE_VECTOR_FLOAT, BITS_PER_UNIT*8, 8, 4, V4SFmode, SFmode)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
rtl.c:183:101: note: expanded from macro 'DEF_MACHMODE'
  ((BITSIZE) >= HOST_BITS_PER_WIDE_INT) ? ~(unsigned HOST_WIDE_INT) 0 : ((unsigned HOST_WIDE_INT) 1 << (BITSIZE)) - 1,
                                                                                                    ^  ~~~~~~~~~
In file included from rtl.c:188:
./machmode.def:139:1: warning: shift count >= width of type [-Wshift-count-overflow]
DEF_MACHMODE (V2DFmode, "V2DF", MODE_VECTOR_FLOAT, BITS_PER_UNIT*16, 16, 8, V8SFmode, DFmode)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
rtl.c:183:101: note: expanded from macro 'DEF_MACHMODE'
  ((BITSIZE) >= HOST_BITS_PER_WIDE_INT) ? ~(unsigned HOST_WIDE_INT) 0 : ((unsigned HOST_WIDE_INT) 1 << (BITSIZE)) - 1,
                                                                                                    ^  ~~~~~~~~~
In file included from rtl.c:188:
./machmode.def:141:1: warning: shift count >= width of type [-Wshift-count-overflow]
DEF_MACHMODE (V4SFmode, "V4SF", MODE_VECTOR_FLOAT, BITS_PER_UNIT*16, 16, 4, V2DFmode, SFmode)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
rtl.c:183:101: note: expanded from macro 'DEF_MACHMODE'
  ((BITSIZE) >= HOST_BITS_PER_WIDE_INT) ? ~(unsigned HOST_WIDE_INT) 0 : ((unsigned HOST_WIDE_INT) 1 << (BITSIZE)) - 1,
                                                                                                    ^  ~~~~~~~~~
In file included from rtl.c:188:
./machmode.def:142:1: warning: shift count >= width of type [-Wshift-count-overflow]
DEF_MACHMODE (V4DFmode, "V4DF", MODE_VECTOR_FLOAT, BITS_PER_UNIT*32, 32, 8, V8DFmode, DFmode)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
rtl.c:183:101: note: expanded from macro 'DEF_MACHMODE'
  ((BITSIZE) >= HOST_BITS_PER_WIDE_INT) ? ~(unsigned HOST_WIDE_INT) 0 : ((unsigned HOST_WIDE_INT) 1 << (BITSIZE)) - 1,
                                                                                                    ^  ~~~~~~~~~
In file included from rtl.c:188:
./machmode.def:144:1: warning: shift count >= width of type [-Wshift-count-overflow]
DEF_MACHMODE (V8SFmode, "V8SF", MODE_VECTOR_FLOAT, BITS_PER_UNIT*32, 32, 4,V4DFmode, SFmode)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
rtl.c:183:101: note: expanded from macro 'DEF_MACHMODE'
  ((BITSIZE) >= HOST_BITS_PER_WIDE_INT) ? ~(unsigned HOST_WIDE_INT) 0 : ((unsigned HOST_WIDE_INT) 1 << (BITSIZE)) - 1,
                                                                                                    ^  ~~~~~~~~~
In file included from rtl.c:188:
./machmode.def:145:1: warning: shift count >= width of type [-Wshift-count-overflow]
DEF_MACHMODE (V8DFmode, "V8DF", MODE_VECTOR_FLOAT, BITS_PER_UNIT*64, 64, 8, VOIDmode, DFmode)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
rtl.c:183:101: note: expanded from macro 'DEF_MACHMODE'
  ((BITSIZE) >= HOST_BITS_PER_WIDE_INT) ? ~(unsigned HOST_WIDE_INT) 0 : ((unsigned HOST_WIDE_INT) 1 << (BITSIZE)) - 1,
                                                                                                    ^  ~~~~~~~~~
In file included from rtl.c:188:
./machmode.def:146:1: warning: shift count >= width of type [-Wshift-count-overflow]
DEF_MACHMODE (V16SFmode, "V16SF", MODE_VECTOR_FLOAT, 512, 64, 4, VOIDmode, SFmode)
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
rtl.c:183:101: note: expanded from macro 'DEF_MACHMODE'
  ((BITSIZE) >= HOST_BITS_PER_WIDE_INT) ? ~(unsigned HOST_WIDE_INT) 0 : ((unsigned HOST_WIDE_INT) 1 << (BITSIZE)) - 1,
                                                                                                    ^  ~~~~~~~~~
32 warnings generated.
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o rtlanal.o -DSPEC_CPU -DNDEBUG -I.   -O2                rtlanal.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
1 warning generated.
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o rtl-error.o -DSPEC_CPU -DNDEBUG -I.   -O2                rtl-error.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o sbitmap.o -DSPEC_CPU -DNDEBUG -I.   -O2                sbitmap.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o sched-deps.o -DSPEC_CPU -DNDEBUG -I.   -O2                sched-deps.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
128 warnings generated.
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o sched-ebb.o -DSPEC_CPU -DNDEBUG -I.   -O2                sched-ebb.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o sched-rgn.o -DSPEC_CPU -DNDEBUG -I.   -O2                sched-rgn.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o sched-vis.o -DSPEC_CPU -DNDEBUG -I.   -O2                sched-vis.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
4 warnings generated.
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o sdbout.o -DSPEC_CPU -DNDEBUG -I.   -O2                sdbout.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o sibcall.o -DSPEC_CPU -DNDEBUG -I.   -O2                sibcall.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o simplify-rtx.o -DSPEC_CPU -DNDEBUG -I.   -O2                simplify-rtx.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o ssa.o -DSPEC_CPU -DNDEBUG -I.   -O2                ssa.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o ssa-ccp.o -DSPEC_CPU -DNDEBUG -I.   -O2                ssa-ccp.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o ssa-dce.o -DSPEC_CPU -DNDEBUG -I.   -O2                ssa-dce.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o stmt.o -DSPEC_CPU -DNDEBUG -I.   -O2                stmt.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o stor-layout.o -DSPEC_CPU -DNDEBUG -I.   -O2                stor-layout.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
2 warnings generated.
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o stringpool.o -DSPEC_CPU -DNDEBUG -I.   -O2                stringpool.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o timevar.o -DSPEC_CPU -DNDEBUG -I.   -O2                timevar.c
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o toplev.o -DSPEC_CPU -DNDEBUG -I.   -O2                toplev.c
clang-12clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o tree.o -DSPEC_CPU -DNDEBUG -I.   -O2                tree.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o tree-dump.o -DSPEC_CPU -DNDEBUG -I.   -O2                tree-dump.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
tree-dump.c:577:10: warning: case value not in enumerated type 'enum tree_code' [-Wswitch]
    case EXPR_STMT:
         ^
tree-dump.c:558:10: warning: case value not in enumerated type 'enum tree_code' [-Wswitch]
    case COMPOUND_STMT:
         ^
tree-dump.c:564:10: warning: case value not in enumerated type 'enum tree_code' [-Wswitch]
    case DECL_STMT:
         ^
tree-dump.c:598:10: warning: case value not in enumerated type 'enum tree_code' [-Wswitch]
    case IF_STMT:
         ^
tree-dump.c:583:10: warning: case value not in enumerated type 'enum tree_code' [-Wswitch]
    case FOR_STMT:
         ^
tree-dump.c:625:10: warning: case value not in enumerated type 'enum tree_code' [-Wswitch]
    case WHILE_STMT:
         ^
tree-dump.c:570:10: warning: case value not in enumerated type 'enum tree_code' [-Wswitch]
    case DO_STMT:
         ^
tree-dump.c:612:10: warning: case value not in enumerated type 'enum tree_code' [-Wswitch]
    case RETURN_STMT:
         ^
tree-dump.c:537:10: warning: case value not in enumerated type 'enum tree_code' [-Wswitch]
    case BREAK_STMT:
         ^
tree-dump.c:538:10: warning: case value not in enumerated type 'enum tree_code' [-Wswitch]
    case CONTINUE_STMT:
         ^
tree-dump.c:618:10: warning: case value not in enumerated type 'enum tree_code' [-Wswitch]
    case SWITCH_STMT:
         ^
tree-dump.c:592:10: warning: case value not in enumerated type 'enum tree_code' [-Wswitch]
    case GOTO_STMT:
         ^
tree-dump.c:606:10: warning: case value not in enumerated type 'enum tree_code' [-Wswitch]
    case LABEL_STMT:
         ^
tree-dump.c:526:10: warning: case value not in enumerated type 'enum tree_code' [-Wswitch]
    case ASM_STMT:
         ^
tree-dump.c:632:10: warning: case value not in enumerated type 'enum tree_code' [-Wswitch]
    case SCOPE_STMT:
         ^
tree-dump.c:543:10: warning: case value not in enumerated type 'enum tree_code' [-Wswitch]
    case CASE_LABEL:
         ^
tree-dump.c:696:10: warning: case value not in enumerated type 'enum tree_code' [-Wswitch]
    case STMT_EXPR:
         ^
tree-dump.c:551:10: warning: case value not in enumerated type 'enum tree_code' [-Wswitch]
    case CLEANUP_STMT:
         ^
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o tree-inline.o -DSPEC_CPU -DNDEBUG -I.   -O2                tree-inline.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o unroll.o -DSPEC_CPU -DNDEBUG -I.   -O2                unroll.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
18 warnings generated.
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o varasm.o -DSPEC_CPU -DNDEBUG -I.   -O2                varasm.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
tree-inline.c:351:31: warning: implicit conversion from enumeration type 'enum c_tree_code' to different enumeration type 'enum tree_code' [-Wenum-conversion]
      goto_stmt = build_stmt (GOTO_STMT, id->ret_label);
                  ~~~~~~~~~~  ^~~~~~~~~
tree-inline.c:360:22: warning: implicit conversion from enumeration type 'enum c_tree_code' to different enumeration type 'enum tree_code' [-Wenum-conversion]
          *tp = build_stmt (EXPR_STMT,
                ~~~~~~~~~~  ^~~~~~~~~
tree-inline.c:529:31: warning: implicit conversion from enumeration type 'enum c_tree_code' to different enumeration type 'enum tree_code' [-Wenum-conversion]
      init_stmt = build_stmt (DECL_STMT, var);
                  ~~~~~~~~~~  ^~~~~~~~~
tree-inline.c:554:28: warning: implicit conversion from enumeration type 'enum c_tree_code' to different enumeration type 'enum tree_code' [-Wenum-conversion]
          init_stmt = build_stmt (EXPR_STMT,
                      ~~~~~~~~~~  ^~~~~~~~~
tree-inline.c:570:31: warning: implicit conversion from enumeration type 'enum c_tree_code' to different enumeration type 'enum tree_code' [-Wenum-conversion]
          cleanup_stmt = build_stmt (CLEANUP_STMT, var, cleanup);
                         ~~~~~~~~~~  ^~~~~~~~~~~~
tree-inline.c:587:31: warning: implicit conversion from enumeration type 'enum c_tree_code' to different enumeration type 'enum tree_code' [-Wenum-conversion]
      init_stmt = build_stmt (EXPR_STMT, value);
                  ~~~~~~~~~~  ^~~~~~~~~
tree-inline.c:634:29: warning: implicit conversion from enumeration type 'enum c_tree_code' to different enumeration type 'enum tree_code' [-Wenum-conversion]
    *use_stmt = build_stmt (EXPR_STMT, var);
                ~~~~~~~~~~  ^~~~~~~~~
tree-inline.c:636:29: warning: implicit conversion from enumeration type 'enum c_tree_code' to different enumeration type 'enum tree_code' [-Wenum-conversion]
    *use_stmt = build_stmt (EXPR_STMT,
                ~~~~~~~~~~  ^~~~~~~~~
tree-inline.c:645:24: warning: implicit conversion from enumeration type 'enum c_tree_code' to different enumeration type 'enum tree_code' [-Wenum-conversion]
    return build_stmt (DECL_STMT, var);
           ~~~~~~~~~~  ^~~~~~~~~
tree-inline.c:856:18: warning: implicit conversion from enumeration type 'enum c_tree_code' to different enumeration type 'enum tree_code' [-Wenum-conversion]
  expr = build1 (STMT_EXPR, TREE_TYPE (TREE_TYPE (fn)), NULL_TREE);
         ~~~~~~  ^~~~~~~~~
tree-inline.c:905:28: warning: implicit conversion from enumeration type 'enum c_tree_code' to different enumeration type 'enum tree_code' [-Wenum-conversion]
  scope_stmt = build_stmt (SCOPE_STMT, DECL_INITIAL (fn));
               ~~~~~~~~~~  ^~~~~~~~~~
tree-inline.c:930:28: warning: implicit conversion from enumeration type 'enum c_tree_code' to different enumeration type 'enum tree_code' [-Wenum-conversion]
  scope_stmt = build_stmt (SCOPE_STMT, DECL_INITIAL (fn));
               ~~~~~~~~~~  ^~~~~~~~~~
tree-inline.c:941:21: warning: implicit conversion from enumeration type 'enum c_tree_code' to different enumeration type 'enum tree_code' [-Wenum-conversion]
               build_stmt (LABEL_STMT, id->ret_label));
               ~~~~~~~~~~  ^~~~~~~~~~
13 warnings generated.
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o varray.o -DSPEC_CPU -DNDEBUG -I.   -O2                varray.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o vmsdbgout.o -DSPEC_CPU -DNDEBUG -I.   -O2                vmsdbgout.c
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o xcoffout.o -DSPEC_CPU -DNDEBUG -I.   -O2                xcoffout.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o ggc-page.o -DSPEC_CPU -DNDEBUG -I.   -O2                ggc-page.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o i386.o -DSPEC_CPU -DNDEBUG -I.   -O2                i386.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o xmalloc.o -DSPEC_CPU -DNDEBUG -I.   -O2                xmalloc.c
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o xexit.o -DSPEC_CPU -DNDEBUG -I.   -O2                xexit.c
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o hashtab.o -DSPEC_CPU -DNDEBUG -I.   -O2                hashtab.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o safe-ctype.o -DSPEC_CPU -DNDEBUG -I.   -O2                safe-ctype.c
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o splay-tree.o -DSPEC_CPU -DNDEBUG -I.   -O2                splay-tree.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o xstrdup.o -DSPEC_CPU -DNDEBUG -I.   -O2                xstrdup.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
4 warnings generated.
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o md5.o -DSPEC_CPU -DNDEBUG -I.   -O2                md5.c
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o fibheap.o -DSPEC_CPU -DNDEBUG -I.   -O2                fibheap.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o xstrerror.o -DSPEC_CPU -DNDEBUG -I.   -O2                xstrerror.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o concat.o -DSPEC_CPU -DNDEBUG -I.   -O2                concat.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o partition.o -DSPEC_CPU -DNDEBUG -I.   -O2                partition.c
i386.c:7938:25: warning: implicit conversion from enumeration type 'enum reg_note' to different enumeration type 'enum machine_mode' [-Wenum-conversion]
          = gen_rtx_EXPR_LIST (REG_BR_PROB,
            ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~
./genrtl.h:122:31: note: expanded from macro 'gen_rtx_EXPR_LIST'
  gen_rtx_fmt_ee (EXPR_LIST, (MODE), (ARG0), (ARG1))
  ~~~~~~~~~~~~~~              ^~~~
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o hex.o -DSPEC_CPU -DNDEBUG -I.   -O2                hex.c
i386.c:7948:28: warning: implicit conversion from enumeration type 'enum reg_note' to different enumeration type 'enum machine_mode' [-Wenum-conversion]
      = gen_rtx_EXPR_LIST (REG_BR_PROB,
        ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~
./genrtl.h:122:31: note: expanded from macro 'gen_rtx_EXPR_LIST'
  gen_rtx_fmt_ee (EXPR_LIST, (MODE), (ARG0), (ARG1))
  ~~~~~~~~~~~~~~              ^~~~
i386.c:7959:25: warning: implicit conversion from enumeration type 'enum reg_note' to different enumeration type 'enum machine_mode' [-Wenum-conversion]
          = gen_rtx_EXPR_LIST (REG_BR_PROB,
            ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~
./genrtl.h:122:31: note: expanded from macro 'gen_rtx_EXPR_LIST'
  gen_rtx_fmt_ee (EXPR_LIST, (MODE), (ARG0), (ARG1))
  ~~~~~~~~~~~~~~              ^~~~
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o lbasename.o -DSPEC_CPU -DNDEBUG -I.   -O2                lbasename.c
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o getpwd.o -DSPEC_CPU -DNDEBUG -I.   -O2                getpwd.c
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o ucbqsort.o -DSPEC_CPU -DNDEBUG -I.   -O2                ucbqsort.c
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
clang-12: warning: -Wl,--allow-multiple-definition: 'linker' input unused [-Wunused-command-line-argument]
clang-12: warning: argument unused during compilation: '-fuse-ld=gold' [-Wunused-command-line-argument]
3 warnings generated.
/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition   -O2          alloca.o asprintf.o vasprintf.o c-parse.o c-lang.o attribs.o c-errors.o c-lex.o c-pragma.o c-decl.o c-typeck.o c-convert.o c-aux-info.o c-common.o c-format.o c-semantics.o c-objc-common.o main.o cpplib.o cpplex.o cppmacro.o cppexp.o cppfiles.o cpphash.o cpperror.o cppinit.o cppdefault.o line-map.o mkdeps.o prefix.o version.o mbchar.o alias.o bb-reorder.o bitmap.o builtins.o caller-save.o calls.o cfg.o cfganal.o cfgbuild.o cfgcleanup.o cfglayout.o cfgloop.o cfgrtl.o combine.o conflict.o convert.o cse.o cselib.o dbxout.o debug.o dependence.o df.o diagnostic.o doloop.o dominance.o dwarf2asm.o dwarf2out.o dwarfout.o emit-rtl.o except.o explow.o expmed.o expr.o final.o flow.o fold-const.o function.o gcse.o genrtl.o ggc-common.o global.o graph.o haifa-sched.o hash.o hashtable.o hooks.o ifcvt.o insn-attrtab.o insn-emit.o insn-extract.o insn-opinit.o insn-output.o insn-peep.o insn-recog.o integrate.o intl.o jump.o langhooks.o lcm.o lists.o local-alloc.o loop.o obstack.o optabs.o params.o predict.o print-rtl.o print-tree.o profile.o real.o recog.o reg-stack.o regclass.o regmove.o regrename.o reload.o reload1.o reorg.o resource.o rtl.o rtlanal.o rtl-error.o sbitmap.o sched-deps.o sched-ebb.o sched-rgn.o sched-vis.o sdbout.o sibcall.o simplify-rtx.o ssa.o ssa-ccp.o ssa-dce.o stmt.o stor-layout.o stringpool.o timevar.o toplev.o tree.o tree-dump.o tree-inline.o unroll.o varasm.o varray.o vmsdbgout.o xcoffout.o ggc-page.o i386.o xmalloc.o xexit.o hashtab.o safe-ctype.o splay-tree.o xstrdup.o md5.o fibheap.o xstrerror.o concat.o partition.o hex.o lbasename.o getpwd.o ucbqsort.o             -lm        -o gcc
clang-12: warning: argument unused during compilation: '-enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang' [-Wunused-command-line-argument]
specmake[1]: Leaving directory `/mnt/sata/Code/zerocost/zerocost-specbenchmark/benchspec/CPU2006/403.gcc/build/build_base_SegmentZero.0000'
Stop make command: Tue Jul  6 13:46:12 2021 (1625604372)
Elapsed time for make command: 00:01:02 (62)
Issuing options command 'specmake -j8 options'
specmake -j8 options 2> options.err | tee options.out
Start options command: Tue Jul  6 13:46:12 2021 (1625604372)
specmake[1]: Entering directory `/mnt/sata/Code/zerocost/zerocost-specbenchmark/benchspec/CPU2006/403.gcc/build/build_base_SegmentZero.0000'
COMP: /mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition -c -o options.o -DSPEC_CPU -DNDEBUG -I.   -O2                <source>
C: CC="/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition"
C: COBJOPT="-c -o options"
P: CPUFLAGS="-DSPEC_CPU -DNDEBUG"
P: BENCH_FLAGS="-I."
P: BENCH_CFLAGS=""
O: OPTIMIZE=""
O: COPTIMIZE="-O2"
P: PORTABILITY=""
P: CPORTABILITY=""
O: EXTRA_CFLAGS=""
O: EXTRA_OPTIMIZE=""
O: EXTRA_COPTIMIZE=""
P: EXTRA_PORTABILITY=""
P: EXTRA_CPORTABILITY=""
LINK: /mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition   -O2          <objects>   -lm        -o options
C: LD="/mnt/sata/ffbuilds/zerocost_llvm_install/bin/clang -fno-asm -fno-asm-blocks -fsanitize=safe-stack -fstack-clash-protection -flto -fuse-ld=gold -fsanitize=cfi-icall -fsanitize-cfi-canonical-jump-tables -fsanitize-cfi-cross-dso -ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang -mseparate-stack-seg -m32 -Wl,--allow-multiple-definition"
O: COPTIMIZE="-O2"
C: MATH_LIBS="-lm"
C: LDOUT="-o options"
specmake[1]: Leaving directory `/mnt/sata/Code/zerocost/zerocost-specbenchmark/benchspec/CPU2006/403.gcc/build/build_base_SegmentZero.0000'
Stop options command: Tue Jul  6 13:46:12 2021 (1625604372)
Elapsed time for options command: 00:00:00 (0)
  Compile for '403.gcc' ended at: Tue Jul  6 13:46:12 2021 (1625604372)
  Elapsed compile for '403.gcc': 00:01:02 (62)

Build successes: 403.gcc(base)

Setting Up Run Directories
  Setting up 403.gcc ref base SegmentZero default: existing (run_base_ref_SegmentZero.0000)

-----------------------------------
Running Benchmarks

-----------------------------------
  Running 403.gcc ref base SegmentZero default
Commands to run:
    -C /mnt/sata/Code/zerocost/zerocost-specbenchmark/benchspec/CPU2006/403.gcc/run/run_base_ref_SegmentZero.0000
    -o 166.out -e 166.err ../run_base_ref_SegmentZero.0000/gcc_base.SegmentZero 166.i -o 166.s (timed)
    -o 200.out -e 200.err ../run_base_ref_SegmentZero.0000/gcc_base.SegmentZero 200.i -o 200.s (timed)
    -o c-typeck.out -e c-typeck.err ../run_base_ref_SegmentZero.0000/gcc_base.SegmentZero c-typeck.i -o c-typeck.s (timed)
    -o cp-decl.out -e cp-decl.err ../run_base_ref_SegmentZero.0000/gcc_base.SegmentZero cp-decl.i -o cp-decl.s (timed)
    -o expr.out -e expr.err ../run_base_ref_SegmentZero.0000/gcc_base.SegmentZero expr.i -o expr.s (timed)
    -o expr2.out -e expr2.err ../run_base_ref_SegmentZero.0000/gcc_base.SegmentZero expr2.i -o expr2.s (timed)
    -o g23.out -e g23.err ../run_base_ref_SegmentZero.0000/gcc_base.SegmentZero g23.i -o g23.s (timed)
    -o s04.out -e s04.err ../run_base_ref_SegmentZero.0000/gcc_base.SegmentZero s04.i -o s04.s (timed)
    -o scilab.out -e scilab.err ../run_base_ref_SegmentZero.0000/gcc_base.SegmentZero scilab.i -o scilab.s (timed)
Specinvoke: /mnt/sata/Code/zerocost/zerocost-specbenchmark/bin/specinvoke -d /mnt/sata/Code/zerocost/zerocost-specbenchmark/benchspec/CPU2006/403.gcc/run/run_base_ref_SegmentZero.0000 -e speccmds.err -o speccmds.stdout -f speccmds.cmd -C
Issuing command '/mnt/sata/Code/zerocost/zerocost-specbenchmark/bin/specinvoke -d /mnt/sata/Code/zerocost/zerocost-specbenchmark/benchspec/CPU2006/403.gcc/run/run_base_ref_SegmentZero.0000 -e speccmds.err -o speccmds.stdout -f speccmds.cmd -C'
/mnt/sata/Code/zerocost/zerocost-specbenchmark/bin/specinvoke -d /mnt/sata/Code/zerocost/zerocost-specbenchmark/benchspec/CPU2006/403.gcc/run/run_base_ref_SegmentZero.0000 -e speccmds.err -o speccmds.stdout -f speccmds.cmd -C
Start command: Tue Jul  6 13:46:13 2021 (1625604373)
Stop command: Tue Jul  6 13:46:13 2021 (1625604373)
Elapsed time for command: 00:00:00 (0)

403.gcc: copy 0 non-zero return code (exit code=1, signal=0)


****************************************
Contents of g23.err
****************************************
gcc_base.SegmentZero: internal error: 4
It is possible that you may be trying to use SPEC's version of gcc 
without first defining the appropriate flags.  Please check the flags 
that are in the config files from recently-published results on your 
platform, and check that you are using an up-to-date compiler.  If
you still need help, please contact SPEC, reporting your hw/os 
platform, your compiler version, and your compilation flags.
Contact SPEC at <URL:http://www.spec.org/>

****************************************

****************************************
Contents of s04.err
****************************************
gcc_base.SegmentZero: internal error: 4
It is possible that you may be trying to use SPEC's version of gcc 
without first defining the appropriate flags.  Please check the flags 
that are in the config files from recently-published results on your 
platform, and check that you are using an up-to-date compiler.  If
you still need help, please contact SPEC, reporting your hw/os 
platform, your compiler version, and your compilation flags.
Contact SPEC at <URL:http://www.spec.org/>

****************************************

****************************************
Contents of c-typeck.err
****************************************
gcc_base.SegmentZero: internal error: 4
It is possible that you may be trying to use SPEC's version of gcc 
without first defining the appropriate flags.  Please check the flags 
that are in the config files from recently-published results on your 
platform, and check that you are using an up-to-date compiler.  If
you still need help, please contact SPEC, reporting your hw/os 
platform, your compiler version, and your compilation flags.
Contact SPEC at <URL:http://www.spec.org/>

****************************************

****************************************
Contents of expr2.err
****************************************
gcc_base.SegmentZero: internal error: 4
It is possible that you may be trying to use SPEC's version of gcc 
without first defining the appropriate flags.  Please check the flags 
that are in the config files from recently-published results on your 
platform, and check that you are using an up-to-date compiler.  If
you still need help, please contact SPEC, reporting your hw/os 
platform, your compiler version, and your compilation flags.
Contact SPEC at <URL:http://www.spec.org/>

****************************************

****************************************
Contents of 166.err
****************************************
gcc_base.SegmentZero: internal error: 4
It is possible that you may be trying to use SPEC's version of gcc 
without first defining the appropriate flags.  Please check the flags 
that are in the config files from recently-published results on your 
platform, and check that you are using an up-to-date compiler.  If
you still need help, please contact SPEC, reporting your hw/os 
platform, your compiler version, and your compilation flags.
Contact SPEC at <URL:http://www.spec.org/>

****************************************

****************************************
Contents of 200.err
****************************************
gcc_base.SegmentZero: internal error: 4
It is possible that you may be trying to use SPEC's version of gcc 
without first defining the appropriate flags.  Please check the flags 
that are in the config files from recently-published results on your 
platform, and check that you are using an up-to-date compiler.  If
you still need help, please contact SPEC, reporting your hw/os 
platform, your compiler version, and your compilation flags.
Contact SPEC at <URL:http://www.spec.org/>

****************************************

****************************************
Contents of cp-decl.err
****************************************
gcc_base.SegmentZero: internal error: 4
It is possible that you may be trying to use SPEC's version of gcc 
without first defining the appropriate flags.  Please check the flags 
that are in the config files from recently-published results on your 
platform, and check that you are using an up-to-date compiler.  If
you still need help, please contact SPEC, reporting your hw/os 
platform, your compiler version, and your compilation flags.
Contact SPEC at <URL:http://www.spec.org/>

****************************************

****************************************
Contents of scilab.err
****************************************
gcc_base.SegmentZero: internal error: 4
It is possible that you may be trying to use SPEC's version of gcc 
without first defining the appropriate flags.  Please check the flags 
that are in the config files from recently-published results on your 
platform, and check that you are using an up-to-date compiler.  If
you still need help, please contact SPEC, reporting your hw/os 
platform, your compiler version, and your compilation flags.
Contact SPEC at <URL:http://www.spec.org/>

****************************************

****************************************
Contents of expr.err
****************************************
gcc_base.SegmentZero: internal error: 4
It is possible that you may be trying to use SPEC's version of gcc 
without first defining the appropriate flags.  Please check the flags 
that are in the config files from recently-published results on your 
platform, and check that you are using an up-to-date compiler.  If
you still need help, please contact SPEC, reporting your hw/os 
platform, your compiler version, and your compilation flags.
Contact SPEC at <URL:http://www.spec.org/>

****************************************
Workload elapsed time (0:1) = 0.003432 seconds

403.gcc: copy 0 non-zero return code (exit code=1, signal=0)

Workload elapsed time (0:2) = 0.002497 seconds

403.gcc: copy 0 non-zero return code (exit code=1, signal=0)

Workload elapsed time (0:3) = 0.003191 seconds

403.gcc: copy 0 non-zero return code (exit code=1, signal=0)

Workload elapsed time (0:4) = 0.005334 seconds

403.gcc: copy 0 non-zero return code (exit code=1, signal=0)

Workload elapsed time (0:5) = 0.002879 seconds

403.gcc: copy 0 non-zero return code (exit code=1, signal=0)

Workload elapsed time (0:6) = 0.002851 seconds

403.gcc: copy 0 non-zero return code (exit code=1, signal=0)

Workload elapsed time (0:7) = 0.002767 seconds

403.gcc: copy 0 non-zero return code (exit code=1, signal=0)

Workload elapsed time (0:8) = 0.002528 seconds

403.gcc: copy 0 non-zero return code (exit code=1, signal=0)

Workload elapsed time (0:9) = 0.002876 seconds
Copy 0 of 403.gcc (base ref) run 1 finished at Tue Jul  6 13:46:13 2021.  Total elapsed time: 0.028355
Benchmark Times:
  Start:    Tue Jul  6 13:46:13 2021 (1625604373)
  Stop:     Tue Jul  6 13:46:13 2021 (1625604373)
  Elapsed:  00:00:00 (0)
  Reported: 0 28470000 0.02847
 Error 403.gcc base ref ratio=282753.78, runtime=0.028470
Error: 1x403.gcc
Producing Raw Reports
mach: default
  ext: SegmentZero
    size: ref
      set: int
NOTICE: sw_compiler is longer than 50 characters and will be split
        format: raw -> /mnt/sata/Code/zerocost/zerocost-specbenchmark/result/CINT2006.002.ref.rsf
Parsing flags for 403.gcc base: done
Doing flag reduction: done
        format: ASCII -> /mnt/sata/Code/zerocost/zerocost-specbenchmark/result/CINT2006.002.ref.txt
      set: fp
      set: all_c_cpp
NOTICE: sw_compiler is longer than 50 characters and will be split
        format: raw -> /mnt/sata/Code/zerocost/zerocost-specbenchmark/result/CINT2006.002.ref.1.rsf
  "all_c_cpp" is not a valid benchset name; this file cannot be formatted

The log for this run is in /mnt/sata/Code/zerocost/zerocost-specbenchmark/result/CPU2006.002.log
The debug log for this run is in /mnt/sata/Code/zerocost/zerocost-specbenchmark/result/CPU2006.002.log.debug

runspec finished at Tue Jul  6 13:46:19 2021; 70 total seconds elapsed
